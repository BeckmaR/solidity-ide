/*
 * generated by Xtext 2.12.0
 */
grammar InternalSolidity;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package com.yakindu.solidity.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.yakindu.solidity.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.yakindu.solidity.services.SolidityGrammarAccess;

}
@parser::members {
	private SolidityGrammarAccess grammarAccess;

	public void setGrammarAccess(SolidityGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSolidityModel
entryRuleSolidityModel
:
{ before(grammarAccess.getSolidityModelRule()); }
	 ruleSolidityModel
{ after(grammarAccess.getSolidityModelRule()); } 
	 EOF 
;

// Rule SolidityModel
ruleSolidityModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSolidityModelAccess().getSourceunitAssignment()); }
		(rule__SolidityModel__SourceunitAssignment)*
		{ after(grammarAccess.getSolidityModelAccess().getSourceunitAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSourceUnit
entryRuleSourceUnit
:
{ before(grammarAccess.getSourceUnitRule()); }
	 ruleSourceUnit
{ after(grammarAccess.getSourceUnitRule()); } 
	 EOF 
;

// Rule SourceUnit
ruleSourceUnit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceUnitAccess().getAlternatives()); }
		(rule__SourceUnit__Alternatives)
		{ after(grammarAccess.getSourceUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePragmaDirective
entryRulePragmaDirective
:
{ before(grammarAccess.getPragmaDirectiveRule()); }
	 rulePragmaDirective
{ after(grammarAccess.getPragmaDirectiveRule()); } 
	 EOF 
;

// Rule PragmaDirective
rulePragmaDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPragmaDirectiveAccess().getGroup()); }
		(rule__PragmaDirective__Group__0)
		{ after(grammarAccess.getPragmaDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportDirective
entryRuleImportDirective
:
{ before(grammarAccess.getImportDirectiveRule()); }
	 ruleImportDirective
{ after(grammarAccess.getImportDirectiveRule()); } 
	 EOF 
;

// Rule ImportDirective
ruleImportDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportDirectiveAccess().getGroup()); }
		(rule__ImportDirective__Group__0)
		{ after(grammarAccess.getImportDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContractDefinition
entryRuleContractDefinition
:
{ before(grammarAccess.getContractDefinitionRule()); }
	 ruleContractDefinition
{ after(grammarAccess.getContractDefinitionRule()); } 
	 EOF 
;

// Rule ContractDefinition
ruleContractDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContractDefinitionAccess().getGroup()); }
		(rule__ContractDefinition__Group__0)
		{ after(grammarAccess.getContractDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInheritanceSpecifier
entryRuleInheritanceSpecifier
:
{ before(grammarAccess.getInheritanceSpecifierRule()); }
	 ruleInheritanceSpecifier
{ after(grammarAccess.getInheritanceSpecifierRule()); } 
	 EOF 
;

// Rule InheritanceSpecifier
ruleInheritanceSpecifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInheritanceSpecifierAccess().getNameAssignment()); }
		(rule__InheritanceSpecifier__NameAssignment)
		{ after(grammarAccess.getInheritanceSpecifierAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContractPart
entryRuleContractPart
:
{ before(grammarAccess.getContractPartRule()); }
	 ruleContractPart
{ after(grammarAccess.getContractPartRule()); } 
	 EOF 
;

// Rule ContractPart
ruleContractPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContractPartAccess().getPartsAssignment()); }
		(rule__ContractPart__PartsAssignment)
		{ after(grammarAccess.getContractPartAccess().getPartsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStructDefinition
entryRuleStructDefinition
:
{ before(grammarAccess.getStructDefinitionRule()); }
	 ruleStructDefinition
{ after(grammarAccess.getStructDefinitionRule()); } 
	 EOF 
;

// Rule StructDefinition
ruleStructDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructDefinitionAccess().getGroup()); }
		(rule__StructDefinition__Group__0)
		{ after(grammarAccess.getStructDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifierDefinition
entryRuleModifierDefinition
:
{ before(grammarAccess.getModifierDefinitionRule()); }
	 ruleModifierDefinition
{ after(grammarAccess.getModifierDefinitionRule()); } 
	 EOF 
;

// Rule ModifierDefinition
ruleModifierDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifierDefinitionAccess().getGroup()); }
		(rule__ModifierDefinition__Group__0)
		{ after(grammarAccess.getModifierDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterList
entryRuleParameterList
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterListAccess().getGroup()); }
		(rule__ParameterList__Group__0)
		{ after(grammarAccess.getParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifierInvocationLiteral
entryRuleModifierInvocationLiteral
:
{ before(grammarAccess.getModifierInvocationLiteralRule()); }
	 ruleModifierInvocationLiteral
{ after(grammarAccess.getModifierInvocationLiteralRule()); } 
	 EOF 
;

// Rule ModifierInvocationLiteral
ruleModifierInvocationLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifierInvocationLiteralAccess().getGroup()); }
		(rule__ModifierInvocationLiteral__Group__0)
		{ after(grammarAccess.getModifierInvocationLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition
:
{ before(grammarAccess.getFunctionDefinitionRule()); }
	 ruleFunctionDefinition
{ after(grammarAccess.getFunctionDefinitionRule()); } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
		(rule__FunctionDefinition__Group__0)
		{ after(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventDefinition
entryRuleEventDefinition
:
{ before(grammarAccess.getEventDefinitionRule()); }
	 ruleEventDefinition
{ after(grammarAccess.getEventDefinitionRule()); } 
	 EOF 
;

// Rule EventDefinition
ruleEventDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventDefinitionAccess().getGroup()); }
		(rule__EventDefinition__Group__0)
		{ after(grammarAccess.getEventDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumDefinition
entryRuleEnumDefinition
:
{ before(grammarAccess.getEnumDefinitionRule()); }
	 ruleEnumDefinition
{ after(grammarAccess.getEnumDefinitionRule()); } 
	 EOF 
;

// Rule EnumDefinition
ruleEnumDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumDefinitionAccess().getGroup()); }
		(rule__EnumDefinition__Group__0)
		{ after(grammarAccess.getEnumDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall()); }
		ruleAssignmentExpression
		{ after(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression
:
{ before(grammarAccess.getAssignmentExpressionRule()); }
	 ruleAssignmentExpression
{ after(grammarAccess.getAssignmentExpressionRule()); } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
		(rule__AssignmentExpression__Group__0)
		{ after(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
		(rule__ConditionalExpression__Group__0)
		{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
		(rule__LogicalOrExpression__Group__0)
		{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
		(rule__LogicalAndExpression__Group__0)
		{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression
:
{ before(grammarAccess.getLogicalNotExpressionRule()); }
	 ruleLogicalNotExpression
{ after(grammarAccess.getLogicalNotExpressionRule()); } 
	 EOF 
;

// Rule LogicalNotExpression
ruleLogicalNotExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
		(rule__LogicalNotExpression__Alternatives)
		{ after(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseXorExpression
entryRuleBitwiseXorExpression
:
{ before(grammarAccess.getBitwiseXorExpressionRule()); }
	 ruleBitwiseXorExpression
{ after(grammarAccess.getBitwiseXorExpressionRule()); } 
	 EOF 
;

// Rule BitwiseXorExpression
ruleBitwiseXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseXorExpressionAccess().getGroup()); }
		(rule__BitwiseXorExpression__Group__0)
		{ after(grammarAccess.getBitwiseXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression
:
{ before(grammarAccess.getBitwiseOrExpressionRule()); }
	 ruleBitwiseOrExpression
{ after(grammarAccess.getBitwiseOrExpressionRule()); } 
	 EOF 
;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseOrExpressionAccess().getGroup()); }
		(rule__BitwiseOrExpression__Group__0)
		{ after(grammarAccess.getBitwiseOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression
:
{ before(grammarAccess.getBitwiseAndExpressionRule()); }
	 ruleBitwiseAndExpression
{ after(grammarAccess.getBitwiseAndExpressionRule()); } 
	 EOF 
;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseAndExpressionAccess().getGroup()); }
		(rule__BitwiseAndExpression__Group__0)
		{ after(grammarAccess.getBitwiseAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalRelationExpression
entryRuleLogicalRelationExpression
:
{ before(grammarAccess.getLogicalRelationExpressionRule()); }
	 ruleLogicalRelationExpression
{ after(grammarAccess.getLogicalRelationExpressionRule()); } 
	 EOF 
;

// Rule LogicalRelationExpression
ruleLogicalRelationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalRelationExpressionAccess().getGroup()); }
		(rule__LogicalRelationExpression__Group__0)
		{ after(grammarAccess.getLogicalRelationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShiftExpression
entryRuleShiftExpression
:
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
		(rule__ShiftExpression__Group__0)
		{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericalAddSubtractExpression
entryRuleNumericalAddSubtractExpression
:
{ before(grammarAccess.getNumericalAddSubtractExpressionRule()); }
	 ruleNumericalAddSubtractExpression
{ after(grammarAccess.getNumericalAddSubtractExpressionRule()); } 
	 EOF 
;

// Rule NumericalAddSubtractExpression
ruleNumericalAddSubtractExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup()); }
		(rule__NumericalAddSubtractExpression__Group__0)
		{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericalMultiplyDivideExpression
entryRuleNumericalMultiplyDivideExpression
:
{ before(grammarAccess.getNumericalMultiplyDivideExpressionRule()); }
	 ruleNumericalMultiplyDivideExpression
{ after(grammarAccess.getNumericalMultiplyDivideExpressionRule()); } 
	 EOF 
;

// Rule NumericalMultiplyDivideExpression
ruleNumericalMultiplyDivideExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup()); }
		(rule__NumericalMultiplyDivideExpression__Group__0)
		{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericalUnaryExpression
entryRuleNumericalUnaryExpression
:
{ before(grammarAccess.getNumericalUnaryExpressionRule()); }
	 ruleNumericalUnaryExpression
{ after(grammarAccess.getNumericalUnaryExpressionRule()); } 
	 EOF 
;

// Rule NumericalUnaryExpression
ruleNumericalUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives()); }
		(rule__NumericalUnaryExpression__Alternatives)
		{ after(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeCastExpression
entryRuleTypeCastExpression
:
{ before(grammarAccess.getTypeCastExpressionRule()); }
	 ruleTypeCastExpression
{ after(grammarAccess.getTypeCastExpressionRule()); } 
	 EOF 
;

// Rule TypeCastExpression
ruleTypeCastExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeCastExpressionAccess().getGroup()); }
		(rule__TypeCastExpression__Group__0)
		{ after(grammarAccess.getTypeCastExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitiveValueExpression
entryRulePrimitiveValueExpression
:
{ before(grammarAccess.getPrimitiveValueExpressionRule()); }
	 rulePrimitiveValueExpression
{ after(grammarAccess.getPrimitiveValueExpressionRule()); } 
	 EOF 
;

// Rule PrimitiveValueExpression
rulePrimitiveValueExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveValueExpressionAccess().getGroup()); }
		(rule__PrimitiveValueExpression__Group__0)
		{ after(grammarAccess.getPrimitiveValueExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureCall
entryRuleFeatureCall
:
{ before(grammarAccess.getFeatureCallRule()); }
	 ruleFeatureCall
{ after(grammarAccess.getFeatureCallRule()); } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureCallAccess().getGroup()); }
		(rule__FeatureCall__Group__0)
		{ after(grammarAccess.getFeatureCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElementReferenceExpression
entryRuleElementReferenceExpression
:
{ before(grammarAccess.getElementReferenceExpressionRule()); }
	 ruleElementReferenceExpression
{ after(grammarAccess.getElementReferenceExpressionRule()); } 
	 EOF 
;

// Rule ElementReferenceExpression
ruleElementReferenceExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup()); }
		(rule__ElementReferenceExpression__Group__0)
		{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArgument
entryRuleArgument
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentAccess().getGroup()); }
		(rule__Argument__Group__0)
		{ after(grammarAccess.getArgumentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
		(rule__ParenthesizedExpression__Group__0)
		{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier
:
{ before(grammarAccess.getTypeSpecifierRule()); }
	 ruleTypeSpecifier
{ after(grammarAccess.getTypeSpecifierRule()); } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeSpecifierAccess().getGroup()); }
		(rule__TypeSpecifier__Group__0)
		{ after(grammarAccess.getTypeSpecifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entrySuperLiteral
entrySuperLiteral
:
{ before(grammarAccess.getExpressionsLiteralRule()); }
	 superLiteral
{ after(grammarAccess.getExpressionsLiteralRule()); } 
	 EOF 
;

// Rule Literal
superLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getAlternatives()); }
		(superLiteral__Alternatives)
		{ after(grammarAccess.getExpressionsLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral
:
{ before(grammarAccess.getBoolLiteralRule()); }
	 ruleBoolLiteral
{ after(grammarAccess.getBoolLiteralRule()); } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolLiteralAccess().getGroup()); }
		(rule__BoolLiteral__Group__0)
		{ after(grammarAccess.getBoolLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getGroup()); }
		(rule__IntLiteral__Group__0)
		{ after(grammarAccess.getIntLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral
:
{ before(grammarAccess.getDoubleLiteralRule()); }
	 ruleDoubleLiteral
{ after(grammarAccess.getDoubleLiteralRule()); } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoubleLiteralAccess().getGroup()); }
		(rule__DoubleLiteral__Group__0)
		{ after(grammarAccess.getDoubleLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatLiteralAccess().getGroup()); }
		(rule__FloatLiteral__Group__0)
		{ after(grammarAccess.getFloatLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHexLiteral
entryRuleHexLiteral
:
{ before(grammarAccess.getHexLiteralRule()); }
	 ruleHexLiteral
{ after(grammarAccess.getHexLiteralRule()); } 
	 EOF 
;

// Rule HexLiteral
ruleHexLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHexLiteralAccess().getGroup()); }
		(rule__HexLiteral__Group__0)
		{ after(grammarAccess.getHexLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryLiteral
entryRuleBinaryLiteral
:
{ before(grammarAccess.getBinaryLiteralRule()); }
	 ruleBinaryLiteral
{ after(grammarAccess.getBinaryLiteralRule()); } 
	 EOF 
;

// Rule BinaryLiteral
ruleBinaryLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryLiteralAccess().getGroup()); }
		(rule__BinaryLiteral__Group__0)
		{ after(grammarAccess.getBinaryLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getGroup()); }
		(rule__StringLiteral__Group__0)
		{ after(grammarAccess.getStringLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNullLiteral
entryRuleNullLiteral
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullLiteralAccess().getGroup()); }
		(rule__NullLiteral__Group__0)
		{ after(grammarAccess.getNullLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalAndOperator
entryRuleLogicalAndOperator
:
{ before(grammarAccess.getLogicalAndOperatorRule()); }
	 ruleLogicalAndOperator
{ after(grammarAccess.getLogicalAndOperatorRule()); } 
	 EOF 
;

// Rule LogicalAndOperator
ruleLogicalAndOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalAndOperatorAccess().getAmpersandAmpersandKeyword()); }
		'&&'
		{ after(grammarAccess.getLogicalAndOperatorAccess().getAmpersandAmpersandKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOrOperator
entryRuleLogicalOrOperator
:
{ before(grammarAccess.getLogicalOrOperatorRule()); }
	 ruleLogicalOrOperator
{ after(grammarAccess.getLogicalOrOperatorRule()); } 
	 EOF 
;

// Rule LogicalOrOperator
ruleLogicalOrOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOrOperatorAccess().getVerticalLineVerticalLineKeyword()); }
		'||'
		{ after(grammarAccess.getLogicalOrOperatorAccess().getVerticalLineVerticalLineKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalNotOperator
entryRuleLogicalNotOperator
:
{ before(grammarAccess.getLogicalNotOperatorRule()); }
	 ruleLogicalNotOperator
{ after(grammarAccess.getLogicalNotOperatorRule()); } 
	 EOF 
;

// Rule LogicalNotOperator
ruleLogicalNotOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalNotOperatorAccess().getExclamationMarkKeyword()); }
		'!'
		{ after(grammarAccess.getLogicalNotOperatorAccess().getExclamationMarkKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseXOrOperator
entryRuleBitwiseXOrOperator
:
{ before(grammarAccess.getBitwiseXOrOperatorRule()); }
	 ruleBitwiseXOrOperator
{ after(grammarAccess.getBitwiseXOrOperatorRule()); } 
	 EOF 
;

// Rule BitwiseXOrOperator
ruleBitwiseXOrOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseXOrOperatorAccess().getCircumflexAccentKeyword()); }
		'^'
		{ after(grammarAccess.getBitwiseXOrOperatorAccess().getCircumflexAccentKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseOrOperator
entryRuleBitwiseOrOperator
:
{ before(grammarAccess.getBitwiseOrOperatorRule()); }
	 ruleBitwiseOrOperator
{ after(grammarAccess.getBitwiseOrOperatorRule()); } 
	 EOF 
;

// Rule BitwiseOrOperator
ruleBitwiseOrOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseOrOperatorAccess().getVerticalLineKeyword()); }
		'|'
		{ after(grammarAccess.getBitwiseOrOperatorAccess().getVerticalLineKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseAndOperator
entryRuleBitwiseAndOperator
:
{ before(grammarAccess.getBitwiseAndOperatorRule()); }
	 ruleBitwiseAndOperator
{ after(grammarAccess.getBitwiseAndOperatorRule()); } 
	 EOF 
;

// Rule BitwiseAndOperator
ruleBitwiseAndOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseAndOperatorAccess().getAmpersandKeyword()); }
		'&'
		{ after(grammarAccess.getBitwiseAndOperatorAccess().getAmpersandKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQID
entryRuleQID
:
{ before(grammarAccess.getQIDRule()); }
	 ruleQID
{ after(grammarAccess.getQIDRule()); } 
	 EOF 
;

// Rule QID
ruleQID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQIDAccess().getGroup()); }
		(rule__QID__Group__0)
		{ after(grammarAccess.getQIDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ContractType
ruleContractType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractTypeAccess().getAlternatives()); }
		(rule__ContractType__Alternatives)
		{ after(grammarAccess.getContractTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Visibility
ruleVisibility
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getAlternatives()); }
		(rule__Visibility__Alternatives)
		{ after(grammarAccess.getVisibilityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AssignmentOperator
ruleAssignmentOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getAlternatives()); }
		(rule__AssignmentOperator__Alternatives)
		{ after(grammarAccess.getAssignmentOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ShiftOperator
ruleShiftOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftOperatorAccess().getAlternatives()); }
		(rule__ShiftOperator__Alternatives)
		{ after(grammarAccess.getShiftOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AdditiveOperator
ruleAdditiveOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
		(rule__AdditiveOperator__Alternatives)
		{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MultiplicativeOperator
ruleMultiplicativeOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
		(rule__MultiplicativeOperator__Alternatives)
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule UnaryOperator
ruleUnaryOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
		(rule__UnaryOperator__Alternatives)
		{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RelationalOperator
ruleRelationalOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
		(rule__RelationalOperator__Alternatives)
		{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceUnit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceUnitAccess().getPragmaDirectiveParserRuleCall_0()); }
		rulePragmaDirective
		{ after(grammarAccess.getSourceUnitAccess().getPragmaDirectiveParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSourceUnitAccess().getImportDirectiveParserRuleCall_1()); }
		ruleImportDirective
		{ after(grammarAccess.getSourceUnitAccess().getImportDirectiveParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSourceUnitAccess().getContractDefinitionParserRuleCall_2()); }
		ruleContractDefinition
		{ after(grammarAccess.getSourceUnitAccess().getContractDefinitionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractPart__PartsAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractPartAccess().getPartsVariableDeclarationParserRuleCall_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getContractPartAccess().getPartsVariableDeclarationParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getContractPartAccess().getPartsStructDefinitionParserRuleCall_0_1()); }
		ruleStructDefinition
		{ after(grammarAccess.getContractPartAccess().getPartsStructDefinitionParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getContractPartAccess().getPartsModifierDefinitionParserRuleCall_0_2()); }
		ruleModifierDefinition
		{ after(grammarAccess.getContractPartAccess().getPartsModifierDefinitionParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getContractPartAccess().getPartsFunctionDefinitionParserRuleCall_0_3()); }
		ruleFunctionDefinition
		{ after(grammarAccess.getContractPartAccess().getPartsFunctionDefinitionParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getContractPartAccess().getPartsEventDefinitionParserRuleCall_0_4()); }
		ruleEventDefinition
		{ after(grammarAccess.getContractPartAccess().getPartsEventDefinitionParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getContractPartAccess().getPartsEnumDefinitionParserRuleCall_0_5()); }
		ruleEnumDefinition
		{ after(grammarAccess.getContractPartAccess().getPartsEnumDefinitionParserRuleCall_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getLiteralParserRuleCall_0()); }
		superLiteral
		{ after(grammarAccess.getLiteralAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getModifierInvocationLiteralParserRuleCall_1()); }
		ruleModifierInvocationLiteral
		{ after(grammarAccess.getLiteralAccess().getModifierInvocationLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getExternalKeyword_3_0()); }
		'external'
		{ after(grammarAccess.getFunctionDefinitionAccess().getExternalKeyword_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getPublicKeyword_3_1()); }
		'public'
		{ after(grammarAccess.getFunctionDefinitionAccess().getPublicKeyword_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getInternalKeyword_3_2()); }
		'internal'
		{ after(grammarAccess.getFunctionDefinitionAccess().getInternalKeyword_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getPrivateKeyword_3_3()); }
		'private'
		{ after(grammarAccess.getFunctionDefinitionAccess().getPrivateKeyword_3_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_5_0()); }
		';'
		{ after(grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getBlockAssignment_5_1()); }
		(rule__FunctionDefinition__BlockAssignment_5_1)
		{ after(grammarAccess.getFunctionDefinitionAccess().getBlockAssignment_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalNotExpressionAccess().getBitwiseXorExpressionParserRuleCall_0()); }
		ruleBitwiseXorExpression
		{ after(grammarAccess.getLogicalNotExpressionAccess().getBitwiseXorExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
		(rule__LogicalNotExpression__Group_1__0)
		{ after(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericalUnaryExpressionAccess().getTypeCastExpressionParserRuleCall_0()); }
		ruleTypeCastExpression
		{ after(grammarAccess.getNumericalUnaryExpressionAccess().getTypeCastExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1()); }
		(rule__NumericalUnaryExpression__Group_1__0)
		{ after(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); }
		rulePrimitiveValueExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1()); }
		ruleFeatureCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_2()); }
		ruleParenthesizedExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Alternatives_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_0()); }
		(rule__FeatureCall__Group_1_3_0__0)
		{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_1()); }
		(rule__FeatureCall__Group_1_3_1__0)
		{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_0()); }
		(rule__ElementReferenceExpression__Group_2_0__0)
		{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1()); }
		(rule__ElementReferenceExpression__Group_2_1__0)
		{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

superLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getBoolLiteralParserRuleCall_0()); }
		ruleBoolLiteral
		{ after(grammarAccess.getExpressionsLiteralAccess().getBoolLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getIntLiteralParserRuleCall_1()); }
		ruleIntLiteral
		{ after(grammarAccess.getExpressionsLiteralAccess().getIntLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getHexLiteralParserRuleCall_2()); }
		ruleHexLiteral
		{ after(grammarAccess.getExpressionsLiteralAccess().getHexLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getBinaryLiteralParserRuleCall_3()); }
		ruleBinaryLiteral
		{ after(grammarAccess.getExpressionsLiteralAccess().getBinaryLiteralParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getDoubleLiteralParserRuleCall_4()); }
		ruleDoubleLiteral
		{ after(grammarAccess.getExpressionsLiteralAccess().getDoubleLiteralParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getFloatLiteralParserRuleCall_5()); }
		ruleFloatLiteral
		{ after(grammarAccess.getExpressionsLiteralAccess().getFloatLiteralParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getStringLiteralParserRuleCall_6()); }
		ruleStringLiteral
		{ after(grammarAccess.getExpressionsLiteralAccess().getStringLiteralParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionsLiteralAccess().getNullLiteralParserRuleCall_7()); }
		ruleNullLiteral
		{ after(grammarAccess.getExpressionsLiteralAccess().getNullLiteralParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractTypeAccess().getCONTRACTEnumLiteralDeclaration_0()); }
		('contract')
		{ after(grammarAccess.getContractTypeAccess().getCONTRACTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getContractTypeAccess().getLIBRARYEnumLiteralDeclaration_1()); }
		('library')
		{ after(grammarAccess.getContractTypeAccess().getLIBRARYEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getContractTypeAccess().getINTERFACEEnumLiteralDeclaration_2()); }
		('interface')
		{ after(grammarAccess.getContractTypeAccess().getINTERFACEEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0()); }
		('public')
		{ after(grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityAccess().getINTERNALEnumLiteralDeclaration_1()); }
		('internal')
		{ after(grammarAccess.getVisibilityAccess().getINTERNALEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_2()); }
		('private')
		{ after(grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityAccess().getCONSTANTEnumLiteralDeclaration_3()); }
		('constant')
		{ after(grammarAccess.getVisibilityAccess().getCONSTANTEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0()); }
		('=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1()); }
		('*=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2()); }
		('/=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3()); }
		('%=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4()); }
		('+=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5()); }
		('-=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6()); }
		('<<=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7()); }
		('>>=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8()); }
		('&=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9()); }
		('^=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10()); }
		('|=')
		{ after(grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0()); }
		('<<')
		{ after(grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1()); }
		('>>')
		{ after(grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
		('*')
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
		('/')
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
		('%')
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
		('~')
		{ after(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); }
		('<=')
		{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); }
		('>')
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
		('>=')
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); }
		('==')
		{ after(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); }
		('!=')
		{ after(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PragmaDirective__Group__0__Impl
	rule__PragmaDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaDirectiveAccess().getPragmaKeyword_0()); }
	'pragma'
	{ after(grammarAccess.getPragmaDirectiveAccess().getPragmaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PragmaDirective__Group__1__Impl
	rule__PragmaDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaDirectiveAccess().getSolidityKeyword_1()); }
	'solidity'
	{ after(grammarAccess.getPragmaDirectiveAccess().getSolidityKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PragmaDirective__Group__2__Impl
	rule__PragmaDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaDirectiveAccess().getIdAssignment_2()); }
	(rule__PragmaDirective__IdAssignment_2)
	{ after(grammarAccess.getPragmaDirectiveAccess().getIdAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PragmaDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaDirectiveAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getPragmaDirectiveAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDirective__Group__0__Impl
	rule__ImportDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDirectiveAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportDirectiveAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDirective__Group__1__Impl
	rule__ImportDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDirectiveAccess().getImportedNamespaceAssignment_1()); }
	(rule__ImportDirective__ImportedNamespaceAssignment_1)
	{ after(grammarAccess.getImportDirectiveAccess().getImportedNamespaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDirective__Group__2__Impl
	rule__ImportDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDirectiveAccess().getGroup_2()); }
	(rule__ImportDirective__Group_2__0)?
	{ after(grammarAccess.getImportDirectiveAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDirectiveAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getImportDirectiveAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDirective__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDirective__Group_2__0__Impl
	rule__ImportDirective__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDirectiveAccess().getAsKeyword_2_0()); }
	'as'
	{ after(grammarAccess.getImportDirectiveAccess().getAsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDirective__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDirectiveAccess().getAliasAssignment_2_1()); }
	(rule__ImportDirective__AliasAssignment_2_1)
	{ after(grammarAccess.getImportDirectiveAccess().getAliasAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContractDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group__0__Impl
	rule__ContractDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getTypeAssignment_0()); }
	(rule__ContractDefinition__TypeAssignment_0)
	{ after(grammarAccess.getContractDefinitionAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group__1__Impl
	rule__ContractDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getNameAssignment_1()); }
	(rule__ContractDefinition__NameAssignment_1)
	{ after(grammarAccess.getContractDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group__2__Impl
	rule__ContractDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getGroup_2()); }
	(rule__ContractDefinition__Group_2__0)?
	{ after(grammarAccess.getContractDefinitionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group__3__Impl
	rule__ContractDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getContractDefinitionAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group__4__Impl
	rule__ContractDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getPartsAssignment_4()); }
	(rule__ContractDefinition__PartsAssignment_4)*
	{ after(grammarAccess.getContractDefinitionAccess().getPartsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getContractDefinitionAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContractDefinition__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group_2__0__Impl
	rule__ContractDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getIsKeyword_2_0()); }
	'is'
	{ after(grammarAccess.getContractDefinitionAccess().getIsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group_2__1__Impl
	rule__ContractDefinition__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getSuperTypeAssignment_2_1()); }
	(rule__ContractDefinition__SuperTypeAssignment_2_1)
	{ after(grammarAccess.getContractDefinitionAccess().getSuperTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getGroup_2_2()); }
	(rule__ContractDefinition__Group_2_2__0)*
	{ after(grammarAccess.getContractDefinitionAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContractDefinition__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group_2_2__0__Impl
	rule__ContractDefinition__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getContractDefinitionAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContractDefinition__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractDefinitionAccess().getSuperTypeAssignment_2_2_1()); }
	(rule__ContractDefinition__SuperTypeAssignment_2_2_1)
	{ after(grammarAccess.getContractDefinitionAccess().getSuperTypeAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0()); }
	(rule__VariableDeclaration__TypeAssignment_0)
	{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVisibilityAssignment_1()); }
	(rule__VariableDeclaration__VisibilityAssignment_1)?
	{ after(grammarAccess.getVariableDeclarationAccess().getVisibilityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
	(rule__VariableDeclaration__NameAssignment_2)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
	(rule__VariableDeclaration__Group_3__0)?
	{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group_3__0__Impl
	rule__VariableDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_3_1()); }
	(rule__VariableDeclaration__InitialValueAssignment_3_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StructDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDefinition__Group__0__Impl
	rule__StructDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefinitionAccess().getStructKeyword_0()); }
	'struct'
	{ after(grammarAccess.getStructDefinitionAccess().getStructKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDefinition__Group__1__Impl
	rule__StructDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefinitionAccess().getNameAssignment_1()); }
	(rule__StructDefinition__NameAssignment_1)
	{ after(grammarAccess.getStructDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDefinition__Group__2__Impl
	rule__StructDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getStructDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDefinition__Group__3__Impl
	rule__StructDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefinitionAccess().getGroup_3()); }
	(rule__StructDefinition__Group_3__0)*
	{ after(grammarAccess.getStructDefinitionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefinitionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getStructDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StructDefinition__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDefinition__Group_3__0__Impl
	rule__StructDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefinitionAccess().getDeclarationsAssignment_3_0()); }
	(rule__StructDefinition__DeclarationsAssignment_3_0)
	{ after(grammarAccess.getStructDefinitionAccess().getDeclarationsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefinitionAccess().getSemicolonKeyword_3_1()); }
	';'
	{ after(grammarAccess.getStructDefinitionAccess().getSemicolonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModifierDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifierDefinition__Group__0__Impl
	rule__ModifierDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierDefinitionAccess().getModifierKeyword_0()); }
	'modifier'
	{ after(grammarAccess.getModifierDefinitionAccess().getModifierKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifierDefinition__Group__1__Impl
	rule__ModifierDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierDefinitionAccess().getNameAssignment_1()); }
	(rule__ModifierDefinition__NameAssignment_1)
	{ after(grammarAccess.getModifierDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifierDefinition__Group__2__Impl
	rule__ModifierDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierDefinitionAccess().getListAssignment_2()); }
	(rule__ModifierDefinition__ListAssignment_2)
	{ after(grammarAccess.getModifierDefinitionAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifierDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierDefinitionAccess().getBlockAssignment_3()); }
	(rule__ModifierDefinition__BlockAssignment_3)
	{ after(grammarAccess.getModifierDefinitionAccess().getBlockAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__1__Impl
	rule__ParameterList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterListAction_1()); }
	()
	{ after(grammarAccess.getParameterListAccess().getParameterListAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__2__Impl
	rule__ParameterList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterAssignment_2()); }
	(rule__ParameterList__ParameterAssignment_2)?
	{ after(grammarAccess.getParameterListAccess().getParameterAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__3__Impl
	rule__ParameterList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_3()); }
	(rule__ParameterList__Group_3__0)*
	{ after(grammarAccess.getParameterListAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getParameterListAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_3__0__Impl
	rule__ParameterList__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getParameterListAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterAssignment_3_1()); }
	(rule__ParameterList__ParameterAssignment_3_1)
	{ after(grammarAccess.getParameterListAccess().getParameterAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_1()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getGroup_2()); }
	(rule__Block__Group_2__0)*
	{ after(grammarAccess.getBlockAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2__0__Impl
	rule__Block__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getExpressionAssignment_2_0()); }
	(rule__Block__ExpressionAssignment_2_0)
	{ after(grammarAccess.getBlockAccess().getExpressionAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getSemicolonKeyword_2_1()); }
	';'
	{ after(grammarAccess.getBlockAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModifierInvocationLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifierInvocationLiteral__Group__0__Impl
	rule__ModifierInvocationLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierInvocationLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierInvocationLiteralAccess().getModifierInvocationLiteralAction_0()); }
	()
	{ after(grammarAccess.getModifierInvocationLiteralAccess().getModifierInvocationLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierInvocationLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifierInvocationLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierInvocationLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierInvocationLiteralAccess().get_Keyword_1()); }
	'_;'
	{ after(grammarAccess.getModifierInvocationLiteralAccess().get_Keyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__0__Impl
	rule__FunctionDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionDefinitionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__1__Impl
	rule__FunctionDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_1()); }
	(rule__FunctionDefinition__NameAssignment_1)?
	{ after(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__2__Impl
	rule__FunctionDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getParameterAssignment_2()); }
	(rule__FunctionDefinition__ParameterAssignment_2)
	{ after(grammarAccess.getFunctionDefinitionAccess().getParameterAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__3__Impl
	rule__FunctionDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getAlternatives_3()); }
	(rule__FunctionDefinition__Alternatives_3)*
	{ after(grammarAccess.getFunctionDefinitionAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__4__Impl
	rule__FunctionDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getGroup_4()); }
	(rule__FunctionDefinition__Group_4__0)?
	{ after(grammarAccess.getFunctionDefinitionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getAlternatives_5()); }
	(rule__FunctionDefinition__Alternatives_5)
	{ after(grammarAccess.getFunctionDefinitionAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group_4__0__Impl
	rule__FunctionDefinition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getReturnsKeyword_4_0()); }
	'returns'
	{ after(grammarAccess.getFunctionDefinitionAccess().getReturnsKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getReturnParameterAssignment_4_1()); }
	(rule__FunctionDefinition__ReturnParameterAssignment_4_1)
	{ after(grammarAccess.getFunctionDefinitionAccess().getReturnParameterAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
	(rule__Parameter__NameAssignment_0)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getVarArgsAssignment_1()); }
	(rule__Parameter__VarArgsAssignment_1)?
	{ after(grammarAccess.getParameterAccess().getVarArgsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getParameterAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeSpecifierAssignment_3()); }
	(rule__Parameter__TypeSpecifierAssignment_3)
	{ after(grammarAccess.getParameterAccess().getTypeSpecifierAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventDefinition__Group__0__Impl
	rule__EventDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventDefinitionAccess().getEventKeyword_0()); }
	'event'
	{ after(grammarAccess.getEventDefinitionAccess().getEventKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventDefinitionAccess().getNameAssignment_1()); }
	(rule__EventDefinition__NameAssignment_1)
	{ after(grammarAccess.getEventDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumDefinition__Group__0__Impl
	rule__EnumDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumDefinitionAccess().getEnumKeyword_0()); }
	'enum'
	{ after(grammarAccess.getEnumDefinitionAccess().getEnumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumDefinition__Group__1__Impl
	rule__EnumDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumDefinitionAccess().getNameAssignment_1()); }
	(rule__EnumDefinition__NameAssignment_1)
	{ after(grammarAccess.getEnumDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumDefinition__Group__2__Impl
	rule__EnumDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getEnumDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumDefinition__Group__3__Impl
	rule__EnumDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumDefinitionAccess().getValueAssignment_3()); }
	(rule__EnumDefinition__ValueAssignment_3)?
	{ after(grammarAccess.getEnumDefinitionAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumDefinition__Group__4__Impl
	rule__EnumDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumDefinitionAccess().getGroup_4()); }
	(rule__EnumDefinition__Group_4__0)*
	{ after(grammarAccess.getEnumDefinitionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumDefinitionAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getEnumDefinitionAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDefinition__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumDefinition__Group_4__0__Impl
	rule__EnumDefinition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumDefinitionAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getEnumDefinitionAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumDefinition__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumDefinitionAccess().getValueAssignment_4_1()); }
	(rule__EnumDefinition__ValueAssignment_4_1)
	{ after(grammarAccess.getEnumDefinitionAccess().getValueAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group__0__Impl
	rule__AssignmentExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_0()); }
	ruleConditionalExpression
	{ after(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getGroup_1()); }
	(rule__AssignmentExpression__Group_1__0)*
	{ after(grammarAccess.getAssignmentExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__0__Impl
	rule__AssignmentExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionVarRefAction_1_0()); }
	()
	{ after(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionVarRefAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__1__Impl
	rule__AssignmentExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AssignmentExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAssignmentExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getExpressionAssignment_1_2()); }
	(rule__AssignmentExpression__ExpressionAssignment_1_2)
	{ after(grammarAccess.getAssignmentExpressionAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
	ruleLogicalOrExpression
	{ after(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
	(rule__ConditionalExpression__Group_1__0)?
	{ after(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__0__Impl
	rule__ConditionalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionConditionAction_1_0()); }
	()
	{ after(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionConditionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__1__Impl
	rule__ConditionalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_1()); }
	'?'
	{ after(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__2__Impl
	rule__ConditionalExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getTrueCaseAssignment_1_2()); }
	(rule__ConditionalExpression__TrueCaseAssignment_1_2)
	{ after(grammarAccess.getConditionalExpressionAccess().getTrueCaseAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__3__Impl
	rule__ConditionalExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_3()); }
	':'
	{ after(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getFalseCaseAssignment_1_4()); }
	(rule__ConditionalExpression__FalseCaseAssignment_1_4)
	{ after(grammarAccess.getConditionalExpressionAccess().getFalseCaseAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
	{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
	(rule__LogicalOrExpression__Group_1__0)*
	{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrOperatorParserRuleCall_1_1()); }
	ruleLogicalOrOperator
	{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__LogicalOrExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
	ruleLogicalNotExpression
	{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
	(rule__LogicalAndExpression__Group_1__0)*
	{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndOperatorParserRuleCall_1_1()); }
	ruleLogicalAndOperator
	{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__LogicalAndExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalNotExpression__Group_1__0__Impl
	rule__LogicalNotExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalNotExpression__Group_1__1__Impl
	rule__LogicalNotExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotOperatorParserRuleCall_1_1()); }
	ruleLogicalNotOperator
	{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalNotExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
	(rule__LogicalNotExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseXorExpression__Group__0__Impl
	rule__BitwiseXorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseOrExpressionParserRuleCall_0()); }
	ruleBitwiseOrExpression
	{ after(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseXorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseXorExpressionAccess().getGroup_1()); }
	(rule__BitwiseXorExpression__Group_1__0)*
	{ after(grammarAccess.getBitwiseXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseXorExpression__Group_1__0__Impl
	rule__BitwiseXorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseXorExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseXorExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseXorExpression__Group_1__1__Impl
	rule__BitwiseXorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseXOrOperatorParserRuleCall_1_1()); }
	ruleBitwiseXOrOperator
	{ after(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseXOrOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseXorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseXorExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__BitwiseXorExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getBitwiseXorExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOrExpression__Group__0__Impl
	rule__BitwiseOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseAndExpressionParserRuleCall_0()); }
	ruleBitwiseAndExpression
	{ after(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1()); }
	(rule__BitwiseOrExpression__Group_1__0)*
	{ after(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOrExpression__Group_1__0__Impl
	rule__BitwiseOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseOrExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseOrExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOrExpression__Group_1__1__Impl
	rule__BitwiseOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseOrOperatorParserRuleCall_1_1()); }
	ruleBitwiseOrOperator
	{ after(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseOrOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseOrExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__BitwiseOrExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getBitwiseOrExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAndExpression__Group__0__Impl
	rule__BitwiseAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAndExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); }
	ruleLogicalRelationExpression
	{ after(grammarAccess.getBitwiseAndExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1()); }
	(rule__BitwiseAndExpression__Group_1__0)*
	{ after(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAndExpression__Group_1__0__Impl
	rule__BitwiseAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAndExpressionAccess().getBitwiseAndExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getBitwiseAndExpressionAccess().getBitwiseAndExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAndExpression__Group_1__1__Impl
	rule__BitwiseAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAndExpressionAccess().getBitwiseAndOperatorParserRuleCall_1_1()); }
	ruleBitwiseAndOperator
	{ after(grammarAccess.getBitwiseAndExpressionAccess().getBitwiseAndOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAndExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__BitwiseAndExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getBitwiseAndExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalRelationExpression__Group__0__Impl
	rule__LogicalRelationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalRelationExpressionAccess().getShiftExpressionParserRuleCall_0()); }
	ruleShiftExpression
	{ after(grammarAccess.getLogicalRelationExpressionAccess().getShiftExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalRelationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1()); }
	(rule__LogicalRelationExpression__Group_1__0)*
	{ after(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalRelationExpression__Group_1__0__Impl
	rule__LogicalRelationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalRelationExpression__Group_1__1__Impl
	rule__LogicalRelationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__LogicalRelationExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalRelationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__LogicalRelationExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group__0__Impl
	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); }
	ruleNumericalAddSubtractExpression
	{ after(grammarAccess.getShiftExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
	(rule__ShiftExpression__Group_1__0)*
	{ after(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group_1__0__Impl
	rule__ShiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group_1__1__Impl
	rule__ShiftExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ShiftExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getShiftExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__ShiftExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getShiftExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalAddSubtractExpression__Group__0__Impl
	rule__NumericalAddSubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); }
	ruleNumericalMultiplyDivideExpression
	{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalAddSubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1()); }
	(rule__NumericalAddSubtractExpression__Group_1__0)*
	{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalAddSubtractExpression__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1_0()); }
	(rule__NumericalAddSubtractExpression__Group_1_0__0)
	{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalAddSubtractExpression__Group_1_0__0__Impl
	rule__NumericalAddSubtractExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0_0()); }
	()
	{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalAddSubtractExpression__Group_1_0__1__Impl
	rule__NumericalAddSubtractExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_0_1()); }
	(rule__NumericalAddSubtractExpression__OperatorAssignment_1_0_1)
	{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalAddSubtractExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_0_2()); }
	(rule__NumericalAddSubtractExpression__RightOperandAssignment_1_0_2)
	{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalMultiplyDivideExpression__Group__0__Impl
	rule__NumericalMultiplyDivideExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); }
	ruleNumericalUnaryExpression
	{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalMultiplyDivideExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1()); }
	(rule__NumericalMultiplyDivideExpression__Group_1__0)*
	{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalMultiplyDivideExpression__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1_0()); }
	(rule__NumericalMultiplyDivideExpression__Group_1_0__0)
	{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalMultiplyDivideExpression__Group_1_0__0__Impl
	rule__NumericalMultiplyDivideExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0_0()); }
	()
	{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalMultiplyDivideExpression__Group_1_0__1__Impl
	rule__NumericalMultiplyDivideExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_0_1()); }
	(rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_0_1)
	{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalMultiplyDivideExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_0_2()); }
	(rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_0_2)
	{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalUnaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalUnaryExpression__Group_1__0__Impl
	rule__NumericalUnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalUnaryExpression__Group_1__1__Impl
	rule__NumericalUnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__NumericalUnaryExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericalUnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2()); }
	(rule__NumericalUnaryExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeCastExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCastExpression__Group__0__Impl
	rule__TypeCastExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCastExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getTypeCastExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCastExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCastExpressionAccess().getGroup_1()); }
	(rule__TypeCastExpression__Group_1__0)*
	{ after(grammarAccess.getTypeCastExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeCastExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCastExpression__Group_1__0__Impl
	rule__TypeCastExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCastExpressionAccess().getGroup_1_0()); }
	(rule__TypeCastExpression__Group_1_0__0)
	{ after(grammarAccess.getTypeCastExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCastExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCastExpressionAccess().getTypeAssignment_1_1()); }
	(rule__TypeCastExpression__TypeAssignment_1_1)
	{ after(grammarAccess.getTypeCastExpressionAccess().getTypeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeCastExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCastExpression__Group_1_0__0__Impl
	rule__TypeCastExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCastExpressionAccess().getTypeCastExpressionOperandAction_1_0_0()); }
	()
	{ after(grammarAccess.getTypeCastExpressionAccess().getTypeCastExpressionOperandAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCastExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCastExpressionAccess().getAsKeyword_1_0_1()); }
	'as'
	{ after(grammarAccess.getTypeCastExpressionAccess().getAsKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveValueExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimitiveValueExpression__Group__0__Impl
	rule__PrimitiveValueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0()); }
	()
	{ after(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimitiveValueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1()); }
	(rule__PrimitiveValueExpression__ValueAssignment_1)
	{ after(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group__0__Impl
	rule__FeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getElementReferenceExpressionParserRuleCall_0()); }
	ruleElementReferenceExpression
	{ after(grammarAccess.getFeatureCallAccess().getElementReferenceExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1()); }
	(rule__FeatureCall__Group_1__0)*
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1__0__Impl
	rule__FeatureCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getFeatureCallOwnerAction_1_0()); }
	()
	{ after(grammarAccess.getFeatureCallAccess().getFeatureCallOwnerAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1__1__Impl
	rule__FeatureCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getFeatureCallAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1__2__Impl
	rule__FeatureCall__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getFeatureAssignment_1_2()); }
	(rule__FeatureCall__FeatureAssignment_1_2)
	{ after(grammarAccess.getFeatureCallAccess().getFeatureAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getAlternatives_1_3()); }
	(rule__FeatureCall__Alternatives_1_3)?
	{ after(grammarAccess.getFeatureCallAccess().getAlternatives_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_0__0__Impl
	rule__FeatureCall__Group_1_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getOperationCallAssignment_1_3_0_0()); }
	(rule__FeatureCall__OperationCallAssignment_1_3_0_0)
	{ after(grammarAccess.getFeatureCallAccess().getOperationCallAssignment_1_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_0__1__Impl
	rule__FeatureCall__Group_1_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_0_1()); }
	(rule__FeatureCall__Group_1_3_0_1__0)?
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_1_3_0_2()); }
	')'
	{ after(grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_1_3_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_0_1__0__Impl
	rule__FeatureCall__Group_1_3_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_1_3_0_1_0()); }
	(rule__FeatureCall__ArgumentsAssignment_1_3_0_1_0)
	{ after(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_1_3_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_0_1_1()); }
	(rule__FeatureCall__Group_1_3_0_1_1__0)*
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_0_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_0_1_1__0__Impl
	rule__FeatureCall__Group_1_3_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getCommaKeyword_1_3_0_1_1_0()); }
	','
	{ after(grammarAccess.getFeatureCallAccess().getCommaKeyword_1_3_0_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_0_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_1_3_0_1_1_1()); }
	(rule__FeatureCall__ArgumentsAssignment_1_3_0_1_1_1)
	{ after(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_1_3_0_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1__0__Impl
	rule__FeatureCall__Group_1_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_0()); }
	(rule__FeatureCall__Group_1_3_1_0__0)
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_1()); }
	(rule__FeatureCall__Group_1_3_1_1__0)*
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_0_0()); }
	(rule__FeatureCall__Group_1_3_1_0_0__0)
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1_0_0__0__Impl
	rule__FeatureCall__Group_1_3_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getArrayAccessAssignment_1_3_1_0_0_0()); }
	(rule__FeatureCall__ArrayAccessAssignment_1_3_1_0_0_0)
	{ after(grammarAccess.getFeatureCallAccess().getArrayAccessAssignment_1_3_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1_0_0__1__Impl
	rule__FeatureCall__Group_1_3_1_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getArraySelectorAssignment_1_3_1_0_0_1()); }
	(rule__FeatureCall__ArraySelectorAssignment_1_3_1_0_0_1)
	{ after(grammarAccess.getFeatureCallAccess().getArraySelectorAssignment_1_3_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_0_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_0_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getRightSquareBracketKeyword_1_3_1_0_0_2()); }
	']'
	{ after(grammarAccess.getFeatureCallAccess().getRightSquareBracketKeyword_1_3_1_0_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_1_0()); }
	(rule__FeatureCall__Group_1_3_1_1_0__0)
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1_1_0__0__Impl
	rule__FeatureCall__Group_1_3_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getLeftSquareBracketKeyword_1_3_1_1_0_0()); }
	'['
	{ after(grammarAccess.getFeatureCallAccess().getLeftSquareBracketKeyword_1_3_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1_1_0__1__Impl
	rule__FeatureCall__Group_1_3_1_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getArraySelectorAssignment_1_3_1_1_0_1()); }
	(rule__FeatureCall__ArraySelectorAssignment_1_3_1_1_0_1)
	{ after(grammarAccess.getFeatureCallAccess().getArraySelectorAssignment_1_3_1_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_3_1_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_3_1_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getRightSquareBracketKeyword_1_3_1_1_0_2()); }
	']'
	{ after(grammarAccess.getFeatureCallAccess().getRightSquareBracketKeyword_1_3_1_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group__0__Impl
	rule__ElementReferenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getElementReferenceExpressionAction_0()); }
	()
	{ after(grammarAccess.getElementReferenceExpressionAccess().getElementReferenceExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group__1__Impl
	rule__ElementReferenceExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getReferenceAssignment_1()); }
	(rule__ElementReferenceExpression__ReferenceAssignment_1)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getReferenceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getAlternatives_2()); }
	(rule__ElementReferenceExpression__Alternatives_2)?
	{ after(grammarAccess.getElementReferenceExpressionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_0__0__Impl
	rule__ElementReferenceExpression__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getOperationCallAssignment_2_0_0()); }
	(rule__ElementReferenceExpression__OperationCallAssignment_2_0_0)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getOperationCallAssignment_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_0__1__Impl
	rule__ElementReferenceExpression__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_0_1()); }
	(rule__ElementReferenceExpression__Group_2_0_1__0)?
	{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getRightParenthesisKeyword_2_0_2()); }
	')'
	{ after(grammarAccess.getElementReferenceExpressionAccess().getRightParenthesisKeyword_2_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group_2_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_0_1__0__Impl
	rule__ElementReferenceExpression__Group_2_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getArgumentsAssignment_2_0_1_0()); }
	(rule__ElementReferenceExpression__ArgumentsAssignment_2_0_1_0)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getArgumentsAssignment_2_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_0_1_1()); }
	(rule__ElementReferenceExpression__Group_2_0_1_1__0)*
	{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group_2_0_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_0_1_1__0__Impl
	rule__ElementReferenceExpression__Group_2_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getCommaKeyword_2_0_1_1_0()); }
	','
	{ after(grammarAccess.getElementReferenceExpressionAccess().getCommaKeyword_2_0_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_0_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getArgumentsAssignment_2_0_1_1_1()); }
	(rule__ElementReferenceExpression__ArgumentsAssignment_2_0_1_1_1)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getArgumentsAssignment_2_0_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1__0__Impl
	rule__ElementReferenceExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1_0()); }
	(rule__ElementReferenceExpression__Group_2_1_0__0)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1_1()); }
	(rule__ElementReferenceExpression__Group_2_1_1__0)*
	{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group_2_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1_0_0()); }
	(rule__ElementReferenceExpression__Group_2_1_0_0__0)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group_2_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1_0_0__0__Impl
	rule__ElementReferenceExpression__Group_2_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getArrayAccessAssignment_2_1_0_0_0()); }
	(rule__ElementReferenceExpression__ArrayAccessAssignment_2_1_0_0_0)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getArrayAccessAssignment_2_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1_0_0__1__Impl
	rule__ElementReferenceExpression__Group_2_1_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorAssignment_2_1_0_0_1()); }
	(rule__ElementReferenceExpression__ArraySelectorAssignment_2_1_0_0_1)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorAssignment_2_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_0_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_0_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getRightSquareBracketKeyword_2_1_0_0_2()); }
	']'
	{ after(grammarAccess.getElementReferenceExpressionAccess().getRightSquareBracketKeyword_2_1_0_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1_1_0()); }
	(rule__ElementReferenceExpression__Group_2_1_1_0__0)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group_2_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1_1_0__0__Impl
	rule__ElementReferenceExpression__Group_2_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getLeftSquareBracketKeyword_2_1_1_0_0()); }
	'['
	{ after(grammarAccess.getElementReferenceExpressionAccess().getLeftSquareBracketKeyword_2_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1_1_0__1__Impl
	rule__ElementReferenceExpression__Group_2_1_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorAssignment_2_1_1_0_1()); }
	(rule__ElementReferenceExpression__ArraySelectorAssignment_2_1_1_0_1)
	{ after(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorAssignment_2_1_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementReferenceExpression__Group_2_1_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group_2_1_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementReferenceExpressionAccess().getRightSquareBracketKeyword_2_1_1_0_2()); }
	']'
	{ after(grammarAccess.getElementReferenceExpressionAccess().getRightSquareBracketKeyword_2_1_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Argument__Group__0__Impl
	rule__Argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentAccess().getGroup_0()); }
	(rule__Argument__Group_0__0)?
	{ after(grammarAccess.getArgumentAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Argument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentAccess().getValueAssignment_1()); }
	(rule__Argument__ValueAssignment_1)
	{ after(grammarAccess.getArgumentAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Argument__Group_0__0__Impl
	rule__Argument__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentAccess().getParameterAssignment_0_0()); }
	(rule__Argument__ParameterAssignment_0_0)
	{ after(grammarAccess.getArgumentAccess().getParameterAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Argument__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentAccess().getEqualsSignKeyword_0_1()); }
	'='
	{ after(grammarAccess.getArgumentAccess().getEqualsSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getParenthesizedExpressionAction_0()); }
	()
	{ after(grammarAccess.getParenthesizedExpressionAccess().getParenthesizedExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__2__Impl
	rule__ParenthesizedExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_2()); }
	(rule__ParenthesizedExpression__ExpressionAssignment_2)
	{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSpecifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group__0__Impl
	rule__TypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getTypeAssignment_0()); }
	(rule__TypeSpecifier__TypeAssignment_0)
	{ after(grammarAccess.getTypeSpecifierAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getGroup_1()); }
	(rule__TypeSpecifier__Group_1__0)?
	{ after(grammarAccess.getTypeSpecifierAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSpecifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group_1__0__Impl
	rule__TypeSpecifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getLessThanSignKeyword_1_0()); }
	'<'
	{ after(grammarAccess.getTypeSpecifierAccess().getLessThanSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getGroup_1_1()); }
	(rule__TypeSpecifier__Group_1_1__0)
	{ after(grammarAccess.getTypeSpecifierAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSpecifier__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group_1_1__0__Impl
	rule__TypeSpecifier__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsAssignment_1_1_0()); }
	(rule__TypeSpecifier__TypeArgumentsAssignment_1_1_0)
	{ after(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group_1_1__1__Impl
	rule__TypeSpecifier__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getGroup_1_1_1()); }
	(rule__TypeSpecifier__Group_1_1_1__0)*
	{ after(grammarAccess.getTypeSpecifierAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getGreaterThanSignKeyword_1_1_2()); }
	'>'
	{ after(grammarAccess.getTypeSpecifierAccess().getGreaterThanSignKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSpecifier__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group_1_1_1__0__Impl
	rule__TypeSpecifier__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getCommaKeyword_1_1_1_0()); }
	','
	{ after(grammarAccess.getTypeSpecifierAccess().getCommaKeyword_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpecifier__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsAssignment_1_1_1_1()); }
	(rule__TypeSpecifier__TypeArgumentsAssignment_1_1_1_1)
	{ after(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsAssignment_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolLiteral__Group__0__Impl
	rule__BoolLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolLiteralAccess().getBoolLiteralAction_0()); }
	()
	{ after(grammarAccess.getBoolLiteralAccess().getBoolLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolLiteralAccess().getValueAssignment_1()); }
	(rule__BoolLiteral__ValueAssignment_1)
	{ after(grammarAccess.getBoolLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteral__Group__0__Impl
	rule__IntLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
	()
	{ after(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
	(rule__IntLiteral__ValueAssignment_1)
	{ after(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleLiteral__Group__0__Impl
	rule__DoubleLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleLiteralAccess().getDoubleLiteralAction_0()); }
	()
	{ after(grammarAccess.getDoubleLiteralAccess().getDoubleLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleLiteralAccess().getValueAssignment_1()); }
	(rule__DoubleLiteral__ValueAssignment_1)
	{ after(grammarAccess.getDoubleLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group__0__Impl
	rule__FloatLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0()); }
	()
	{ after(grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getValueAssignment_1()); }
	(rule__FloatLiteral__ValueAssignment_1)
	{ after(grammarAccess.getFloatLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HexLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HexLiteral__Group__0__Impl
	rule__HexLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HexLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHexLiteralAccess().getHexLiteralAction_0()); }
	()
	{ after(grammarAccess.getHexLiteralAccess().getHexLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HexLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HexLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HexLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHexLiteralAccess().getValueAssignment_1()); }
	(rule__HexLiteral__ValueAssignment_1)
	{ after(grammarAccess.getHexLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryLiteral__Group__0__Impl
	rule__BinaryLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryLiteralAccess().getBinaryLiteralAction_0()); }
	()
	{ after(grammarAccess.getBinaryLiteralAccess().getBinaryLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryLiteralAccess().getValueAssignment_1()); }
	(rule__BinaryLiteral__ValueAssignment_1)
	{ after(grammarAccess.getBinaryLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringLiteral__Group__0__Impl
	rule__StringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
	()
	{ after(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
	(rule__StringLiteral__ValueAssignment_1)
	{ after(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullLiteral__Group__0__Impl
	rule__NullLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0()); }
	()
	{ after(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullLiteralAccess().getNullKeyword_1()); }
	'null'
	{ after(grammarAccess.getNullLiteralAccess().getNullKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QID__Group__0__Impl
	rule__QID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQIDAccess().getGroup_1()); }
	(rule__QID__Group_1__0)*
	{ after(grammarAccess.getQIDAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QID__Group_1__0__Impl
	rule__QID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SolidityModel__SourceunitAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSolidityModelAccess().getSourceunitSourceUnitParserRuleCall_0()); }
		ruleSourceUnit
		{ after(grammarAccess.getSolidityModelAccess().getSourceunitSourceUnitParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__IdAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPragmaDirectiveAccess().getIdVERSIONTerminalRuleCall_2_0()); }
		RULE_VERSION
		{ after(grammarAccess.getPragmaDirectiveAccess().getIdVERSIONTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__ImportedNamespaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportDirectiveAccess().getImportedNamespaceSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getImportDirectiveAccess().getImportedNamespaceSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDirective__AliasAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportDirectiveAccess().getAliasSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getImportDirectiveAccess().getAliasSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractDefinitionAccess().getTypeContractTypeEnumRuleCall_0_0()); }
		ruleContractType
		{ after(grammarAccess.getContractDefinitionAccess().getTypeContractTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getContractDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__SuperTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractDefinitionAccess().getSuperTypeInheritanceSpecifierParserRuleCall_2_1_0()); }
		ruleInheritanceSpecifier
		{ after(grammarAccess.getContractDefinitionAccess().getSuperTypeInheritanceSpecifierParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__SuperTypeAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractDefinitionAccess().getSuperTypeInheritanceSpecifierParserRuleCall_2_2_1_0()); }
		ruleInheritanceSpecifier
		{ after(grammarAccess.getContractDefinitionAccess().getSuperTypeInheritanceSpecifierParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractDefinition__PartsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractDefinitionAccess().getPartsContractPartParserRuleCall_4_0()); }
		ruleContractPart
		{ after(grammarAccess.getContractDefinitionAccess().getPartsContractPartParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InheritanceSpecifier__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInheritanceSpecifierAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getInheritanceSpecifierAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContractPart__PartsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractPartAccess().getPartsAlternatives_0()); }
		(rule__ContractPart__PartsAlternatives_0)
		{ after(grammarAccess.getContractPartAccess().getPartsAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getTypeEObjectCrossReference_0_0()); }
		(
			{ before(grammarAccess.getVariableDeclarationAccess().getTypeEObjectQIDParserRuleCall_0_0_1()); }
			ruleQID
			{ after(grammarAccess.getVariableDeclarationAccess().getTypeEObjectQIDParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getVariableDeclarationAccess().getTypeEObjectCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__VisibilityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getVisibilityVisibilityEnumRuleCall_1_0()); }
		ruleVisibility
		{ after(grammarAccess.getVariableDeclarationAccess().getVisibilityVisibilityEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__InitialValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getInitialValueExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableDeclarationAccess().getInitialValueExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStructDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDefinition__DeclarationsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructDefinitionAccess().getDeclarationsVariableDeclarationParserRuleCall_3_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStructDefinitionAccess().getDeclarationsVariableDeclarationParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModifierDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierDefinitionAccess().getListParameterListParserRuleCall_2_0()); }
		ruleParameterList
		{ after(grammarAccess.getModifierDefinitionAccess().getListParameterListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifierDefinition__BlockAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierDefinitionAccess().getBlockBlockParserRuleCall_3_0()); }
		ruleBlock
		{ after(grammarAccess.getModifierDefinitionAccess().getBlockBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParameterAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getParameterParameterParserRuleCall_2_0()); }
		ruleParameter
		{ after(grammarAccess.getParameterListAccess().getParameterParameterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParameterAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getParameterParameterParserRuleCall_3_1_0()); }
		ruleParameter
		{ after(grammarAccess.getParameterListAccess().getParameterParameterParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__ExpressionAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getExpressionExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getBlockAccess().getExpressionExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ParameterAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getParameterParameterListParserRuleCall_2_0()); }
		ruleParameterList
		{ after(grammarAccess.getFunctionDefinitionAccess().getParameterParameterListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ReturnParameterAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getReturnParameterParameterListParserRuleCall_4_1_0()); }
		ruleParameterList
		{ after(grammarAccess.getFunctionDefinitionAccess().getReturnParameterParameterListParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__BlockAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getBlockBlockParserRuleCall_5_1_0()); }
		ruleBlock
		{ after(grammarAccess.getFunctionDefinitionAccess().getBlockBlockParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__VarArgsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getVarArgsFullStopFullStopFullStopKeyword_1_0()); }
		(
			{ before(grammarAccess.getParameterAccess().getVarArgsFullStopFullStopFullStopKeyword_1_0()); }
			'...'
			{ after(grammarAccess.getParameterAccess().getVarArgsFullStopFullStopFullStopKeyword_1_0()); }
		)
		{ after(grammarAccess.getParameterAccess().getVarArgsFullStopFullStopFullStopKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeSpecifierAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getTypeSpecifierTypeSpecifierParserRuleCall_3_0()); }
		ruleTypeSpecifier
		{ after(grammarAccess.getParameterAccess().getTypeSpecifierTypeSpecifierParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumDefinitionAccess().getValueSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnumDefinitionAccess().getValueSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__ValueAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumDefinitionAccess().getValueSTRINGTerminalRuleCall_4_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnumDefinitionAccess().getValueSTRINGTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_1_1_0()); }
		ruleAssignmentOperator
		{ after(grammarAccess.getAssignmentExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getExpressionConditionalExpressionParserRuleCall_1_2_0()); }
		ruleConditionalExpression
		{ after(grammarAccess.getAssignmentExpressionAccess().getExpressionConditionalExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__TrueCaseAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getTrueCaseLogicalOrExpressionParserRuleCall_1_2_0()); }
		ruleLogicalOrExpression
		{ after(grammarAccess.getConditionalExpressionAccess().getTrueCaseLogicalOrExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__FalseCaseAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getFalseCaseLogicalOrExpressionParserRuleCall_1_4_0()); }
		ruleLogicalOrExpression
		{ after(grammarAccess.getConditionalExpressionAccess().getFalseCaseLogicalOrExpressionParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
		ruleLogicalAndExpression
		{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); }
		ruleLogicalNotExpression
		{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandBitwiseXorExpressionParserRuleCall_1_2_0()); }
		ruleBitwiseXorExpression
		{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandBitwiseXorExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseXorExpressionAccess().getRightOperandBitwiseOrExpressionParserRuleCall_1_2_0()); }
		ruleBitwiseOrExpression
		{ after(grammarAccess.getBitwiseXorExpressionAccess().getRightOperandBitwiseOrExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseOrExpressionAccess().getRightOperandBitwiseAndExpressionParserRuleCall_1_2_0()); }
		ruleBitwiseAndExpression
		{ after(grammarAccess.getBitwiseOrExpressionAccess().getRightOperandBitwiseAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseAndExpressionAccess().getRightOperandLogicalRelationExpressionParserRuleCall_1_2_0()); }
		ruleLogicalRelationExpression
		{ after(grammarAccess.getBitwiseAndExpressionAccess().getRightOperandLogicalRelationExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
		ruleRelationalOperator
		{ after(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandShiftExpressionParserRuleCall_1_2_0()); }
		ruleShiftExpression
		{ after(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandShiftExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_1_0()); }
		ruleShiftOperator
		{ after(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); }
		ruleNumericalAddSubtractExpression
		{ after(grammarAccess.getShiftExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__OperatorAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_1_0()); }
		ruleAdditiveOperator
		{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__RightOperandAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_0_2_0()); }
		ruleNumericalMultiplyDivideExpression
		{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_0_1_0()); }
		ruleMultiplicativeOperator
		{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_0_2_0()); }
		ruleNumericalUnaryExpression
		{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
		ruleUnaryOperator
		{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperandTypeCastExpressionParserRuleCall_1_2_0()); }
		ruleTypeCastExpression
		{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperandTypeCastExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCastExpression__TypeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeCastExpressionAccess().getTypeTypeCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getTypeCastExpressionAccess().getTypeTypeQIDParserRuleCall_1_1_0_1()); }
			ruleQID
			{ after(grammarAccess.getTypeCastExpressionAccess().getTypeTypeQIDParserRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getTypeCastExpressionAccess().getTypeTypeCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
		ruleLiteral
		{ after(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__FeatureAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getFeatureEObjectCrossReference_1_2_0()); }
		(
			{ before(grammarAccess.getFeatureCallAccess().getFeatureEObjectIDTerminalRuleCall_1_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFeatureCallAccess().getFeatureEObjectIDTerminalRuleCall_1_2_0_1()); }
		)
		{ after(grammarAccess.getFeatureCallAccess().getFeatureEObjectCrossReference_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__OperationCallAssignment_1_3_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getOperationCallLeftParenthesisKeyword_1_3_0_0_0()); }
		(
			{ before(grammarAccess.getFeatureCallAccess().getOperationCallLeftParenthesisKeyword_1_3_0_0_0()); }
			'('
			{ after(grammarAccess.getFeatureCallAccess().getOperationCallLeftParenthesisKeyword_1_3_0_0_0()); }
		)
		{ after(grammarAccess.getFeatureCallAccess().getOperationCallLeftParenthesisKeyword_1_3_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArgumentsAssignment_1_3_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getArgumentsArgumentParserRuleCall_1_3_0_1_0_0()); }
		ruleArgument
		{ after(grammarAccess.getFeatureCallAccess().getArgumentsArgumentParserRuleCall_1_3_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArgumentsAssignment_1_3_0_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getArgumentsArgumentParserRuleCall_1_3_0_1_1_1_0()); }
		ruleArgument
		{ after(grammarAccess.getFeatureCallAccess().getArgumentsArgumentParserRuleCall_1_3_0_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArrayAccessAssignment_1_3_1_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getArrayAccessLeftSquareBracketKeyword_1_3_1_0_0_0_0()); }
		(
			{ before(grammarAccess.getFeatureCallAccess().getArrayAccessLeftSquareBracketKeyword_1_3_1_0_0_0_0()); }
			'['
			{ after(grammarAccess.getFeatureCallAccess().getArrayAccessLeftSquareBracketKeyword_1_3_1_0_0_0_0()); }
		)
		{ after(grammarAccess.getFeatureCallAccess().getArrayAccessLeftSquareBracketKeyword_1_3_1_0_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArraySelectorAssignment_1_3_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getArraySelectorExpressionParserRuleCall_1_3_1_0_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFeatureCallAccess().getArraySelectorExpressionParserRuleCall_1_3_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArraySelectorAssignment_1_3_1_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getArraySelectorExpressionParserRuleCall_1_3_1_1_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFeatureCallAccess().getArraySelectorExpressionParserRuleCall_1_3_1_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__ReferenceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getReferenceEObjectCrossReference_1_0()); }
		(
			{ before(grammarAccess.getElementReferenceExpressionAccess().getReferenceEObjectIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getElementReferenceExpressionAccess().getReferenceEObjectIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getElementReferenceExpressionAccess().getReferenceEObjectCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__OperationCallAssignment_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getOperationCallLeftParenthesisKeyword_2_0_0_0()); }
		(
			{ before(grammarAccess.getElementReferenceExpressionAccess().getOperationCallLeftParenthesisKeyword_2_0_0_0()); }
			'('
			{ after(grammarAccess.getElementReferenceExpressionAccess().getOperationCallLeftParenthesisKeyword_2_0_0_0()); }
		)
		{ after(grammarAccess.getElementReferenceExpressionAccess().getOperationCallLeftParenthesisKeyword_2_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__ArgumentsAssignment_2_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getArgumentsArgumentParserRuleCall_2_0_1_0_0()); }
		ruleArgument
		{ after(grammarAccess.getElementReferenceExpressionAccess().getArgumentsArgumentParserRuleCall_2_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__ArgumentsAssignment_2_0_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getArgumentsArgumentParserRuleCall_2_0_1_1_1_0()); }
		ruleArgument
		{ after(grammarAccess.getElementReferenceExpressionAccess().getArgumentsArgumentParserRuleCall_2_0_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__ArrayAccessAssignment_2_1_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getArrayAccessLeftSquareBracketKeyword_2_1_0_0_0_0()); }
		(
			{ before(grammarAccess.getElementReferenceExpressionAccess().getArrayAccessLeftSquareBracketKeyword_2_1_0_0_0_0()); }
			'['
			{ after(grammarAccess.getElementReferenceExpressionAccess().getArrayAccessLeftSquareBracketKeyword_2_1_0_0_0_0()); }
		)
		{ after(grammarAccess.getElementReferenceExpressionAccess().getArrayAccessLeftSquareBracketKeyword_2_1_0_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__ArraySelectorAssignment_2_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorExpressionParserRuleCall_2_1_0_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorExpressionParserRuleCall_2_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__ArraySelectorAssignment_2_1_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorExpressionParserRuleCall_2_1_1_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorExpressionParserRuleCall_2_1_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__ParameterAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentAccess().getParameterParameterCrossReference_0_0_0()); }
		(
			{ before(grammarAccess.getArgumentAccess().getParameterParameterIDTerminalRuleCall_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getArgumentAccess().getParameterParameterIDTerminalRuleCall_0_0_0_1()); }
		)
		{ after(grammarAccess.getArgumentAccess().getParameterParameterCrossReference_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentAccess().getValueConditionalExpressionParserRuleCall_1_0()); }
		ruleConditionalExpression
		{ after(grammarAccess.getArgumentAccess().getValueConditionalExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeSpecifierAccess().getTypeTypeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getTypeSpecifierAccess().getTypeTypeQIDParserRuleCall_0_0_1()); }
			ruleQID
			{ after(grammarAccess.getTypeSpecifierAccess().getTypeTypeQIDParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getTypeSpecifierAccess().getTypeTypeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__TypeArgumentsAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsTypeSpecifierParserRuleCall_1_1_0_0()); }
		ruleTypeSpecifier
		{ after(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsTypeSpecifierParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__TypeArgumentsAssignment_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsTypeSpecifierParserRuleCall_1_1_1_1_0()); }
		ruleTypeSpecifier
		{ after(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsTypeSpecifierParserRuleCall_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolLiteralAccess().getValueBOOLTerminalRuleCall_1_0()); }
		RULE_BOOL
		{ after(grammarAccess.getBoolLiteralAccess().getValueBOOLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_1_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HexLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHexLiteralAccess().getValueHEXTerminalRuleCall_1_0()); }
		RULE_HEX
		{ after(grammarAccess.getHexLiteralAccess().getValueHEXTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryLiteralAccess().getValueBINARYTerminalRuleCall_1_0()); }
		RULE_BINARY
		{ after(grammarAccess.getBinaryLiteralAccess().getValueBINARYTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_VERSION : '^' RULE_INT . RULE_INT . RULE_INT;

RULE_BOOL : ('true'|'false'|'yes'|'no');

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_BINARY : '0' ('b'|'B') ('0'|'1')+;

RULE_DOUBLE : RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)? ('d'|'D')?;

RULE_FLOAT : RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)? ('f'|'F')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.12.0
 */
package com.yakindu.solidity.ui.outline

import com.google.inject.Inject
import com.yakindu.solidity.solidity.SolidityModel
import com.yakindu.solidity.solidity.SourceUnit
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.yakindu.base.types.Declaration
import org.yakindu.base.types.Package

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class SolidityOutlineTreeProvider extends DefaultOutlineTreeProvider {
	@Inject IImageHelper imageHelper
	
	override protected void _createChildren(DocumentRootNode parentNode, EObject rootElement) {
		for (EObject content : rootElement.eContents()) {
			createNode(parentNode, content)
		}
	}
	
	def void _createNode(IOutlineNode parentNode, SolidityModel model) {
	}
	
	def void _createChildren(IOutlineNode parentNode, SourceUnit model) {
		val imports = model.import.toList
		if (!imports.empty) {
			createImportNode (parentNode, imports)
		}
		model.member.forEach[member|
			createNode(parentNode, member)
		]
	}
	
	def private createImportNode (IOutlineNode parentNode, List<Package> imports) {
		val importParent = new SimpleOutlineNode(parentNode, imageHelper.getImage("importgroup"), "Imports", false)
		for (imp: imports) {
			createNode(importParent, imp)
		}
	}

	override protected _isLeaf(EObject element) {
		switch element {
			Declaration: true
			default: return super._isLeaf(element)
		}
	}
}

/*
 * generated by Xtext 2.12.0
 */
package com.yakindu.solidity.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.yakindu.base.expressions.services.ExpressionsGrammarAccess;

@Singleton
public class SolidityGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SolidityModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.SolidityModel");
		private final Assignment cSourceunitAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSourceunitSourceUnitParserRuleCall_0 = (RuleCall)cSourceunitAssignment.eContents().get(0);
		
		//SolidityModel:
		//	sourceunit+=SourceUnit*;
		@Override public ParserRule getRule() { return rule; }
		
		//sourceunit+=SourceUnit*
		public Assignment getSourceunitAssignment() { return cSourceunitAssignment; }
		
		//SourceUnit
		public RuleCall getSourceunitSourceUnitParserRuleCall_0() { return cSourceunitSourceUnitParserRuleCall_0; }
	}
	public class SourceUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.SourceUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPragmaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPragmaPragmaDirectiveParserRuleCall_1_0 = (RuleCall)cPragmaAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportDirectiveParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cMemberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMemberContractDefinitionParserRuleCall_3_0 = (RuleCall)cMemberAssignment_3.eContents().get(0);
		
		//SourceUnit types::Package:
		//	{SourceUnit} pragma=PragmaDirective
		//	imports+=ImportDirective*
		//	member+=ContractDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SourceUnit} pragma=PragmaDirective imports+=ImportDirective* member+=ContractDefinition*
		public Group getGroup() { return cGroup; }
		
		//{SourceUnit}
		public Action getSourceUnitAction_0() { return cSourceUnitAction_0; }
		
		//pragma=PragmaDirective
		public Assignment getPragmaAssignment_1() { return cPragmaAssignment_1; }
		
		//PragmaDirective
		public RuleCall getPragmaPragmaDirectiveParserRuleCall_1_0() { return cPragmaPragmaDirectiveParserRuleCall_1_0; }
		
		//imports+=ImportDirective*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//ImportDirective
		public RuleCall getImportsImportDirectiveParserRuleCall_2_0() { return cImportsImportDirectiveParserRuleCall_2_0; }
		
		//member+=ContractDefinition*
		public Assignment getMemberAssignment_3() { return cMemberAssignment_3; }
		
		//ContractDefinition
		public RuleCall getMemberContractDefinitionParserRuleCall_3_0() { return cMemberContractDefinitionParserRuleCall_3_0; }
	}
	public class PragmaDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.PragmaDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPragmaDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPragmaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSolidityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionVERSIONTerminalRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PragmaDirective types::PackageMember:
		//	{PragmaDirective} 'pragma' 'solidity' version=VERSION ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{PragmaDirective} 'pragma' 'solidity' version=VERSION ';'
		public Group getGroup() { return cGroup; }
		
		//{PragmaDirective}
		public Action getPragmaDirectiveAction_0() { return cPragmaDirectiveAction_0; }
		
		//'pragma'
		public Keyword getPragmaKeyword_1() { return cPragmaKeyword_1; }
		
		//'solidity'
		public Keyword getSolidityKeyword_2() { return cSolidityKeyword_2; }
		
		//version=VERSION
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }
		
		//VERSION
		public RuleCall getVersionVERSIONTerminalRuleCall_3_0() { return cVersionVERSIONTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ImportDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ImportDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceSTRINGTerminalRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ImportDirective types::PackageMember:
		//	{ImportDirective} 'import' importedNamespace=STRING ('as' alias=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ImportDirective} 'import' importedNamespace=STRING ('as' alias=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//{ImportDirective}
		public Action getImportDirectiveAction_0() { return cImportDirectiveAction_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//importedNamespace=STRING
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }
		
		//STRING
		public RuleCall getImportedNamespaceSTRINGTerminalRuleCall_2_0() { return cImportedNamespaceSTRINGTerminalRuleCall_2_0; }
		
		//('as' alias=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//alias=STRING
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//STRING
		public RuleCall getAliasSTRINGTerminalRuleCall_3_1_0() { return cAliasSTRINGTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ContractDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ContractDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContractDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeContractTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypesComplexTypeCrossReference_3_1_0 = (CrossReference)cSuperTypesAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypesComplexTypeQIDParserRuleCall_3_1_0_1 = (RuleCall)cSuperTypesComplexTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cSuperTypesComplexTypeCrossReference_3_2_1_0 = (CrossReference)cSuperTypesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cSuperTypesComplexTypeQIDParserRuleCall_3_2_1_0_1 = (RuleCall)cSuperTypesComplexTypeCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesContractPartParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ContractDefinition types::ComplexType:
		//	{ContractDefinition} type=ContractType name=ID ('is' superTypes+=[types::ComplexType|QID] (','
		//	superTypes+=[types::ComplexType|QID])*)?
		//	'{' features+=ContractPart* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ContractDefinition} type=ContractType name=ID ('is' superTypes+=[types::ComplexType|QID] (','
		//superTypes+=[types::ComplexType|QID])*)? '{' features+=ContractPart* '}'
		public Group getGroup() { return cGroup; }
		
		//{ContractDefinition}
		public Action getContractDefinitionAction_0() { return cContractDefinitionAction_0; }
		
		//type=ContractType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ContractType
		public RuleCall getTypeContractTypeEnumRuleCall_1_0() { return cTypeContractTypeEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('is' superTypes+=[types::ComplexType|QID] (',' superTypes+=[types::ComplexType|QID])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'is'
		public Keyword getIsKeyword_3_0() { return cIsKeyword_3_0; }
		
		//superTypes+=[types::ComplexType|QID]
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }
		
		//[types::ComplexType|QID]
		public CrossReference getSuperTypesComplexTypeCrossReference_3_1_0() { return cSuperTypesComplexTypeCrossReference_3_1_0; }
		
		//QID
		public RuleCall getSuperTypesComplexTypeQIDParserRuleCall_3_1_0_1() { return cSuperTypesComplexTypeQIDParserRuleCall_3_1_0_1; }
		
		//(',' superTypes+=[types::ComplexType|QID])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//superTypes+=[types::ComplexType|QID]
		public Assignment getSuperTypesAssignment_3_2_1() { return cSuperTypesAssignment_3_2_1; }
		
		//[types::ComplexType|QID]
		public CrossReference getSuperTypesComplexTypeCrossReference_3_2_1_0() { return cSuperTypesComplexTypeCrossReference_3_2_1_0; }
		
		//QID
		public RuleCall getSuperTypesComplexTypeQIDParserRuleCall_3_2_1_0_1() { return cSuperTypesComplexTypeQIDParserRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//features+=ContractPart*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }
		
		//ContractPart
		public RuleCall getFeaturesContractPartParserRuleCall_5_0() { return cFeaturesContractPartParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ContractPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ContractPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModifierDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEventDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ContractPart types::Declaration:
		//	VariableDefinition | ModifierDefinition | FunctionDefinition | EventDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDefinition | ModifierDefinition | FunctionDefinition | EventDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_0() { return cVariableDefinitionParserRuleCall_0; }
		
		//ModifierDefinition
		public RuleCall getModifierDefinitionParserRuleCall_1() { return cModifierDefinitionParserRuleCall_1; }
		
		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_2() { return cFunctionDefinitionParserRuleCall_2; }
		
		//EventDefinition
		public RuleCall getEventDefinitionParserRuleCall_3() { return cEventDefinitionParserRuleCall_3; }
	}
	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeSpecifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeSpecifierAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_4_1_0 = (RuleCall)cInitialValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////StructDefinition | | EnumDefinition;
		//VariableDefinition types::Property:
		//	{VariableDefinition} typeSpecifier=TypeSpecifier visibility=Visibility? name=ID ('=' initialValue=Expression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableDefinition} typeSpecifier=TypeSpecifier visibility=Visibility? name=ID ('=' initialValue=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }
		
		//typeSpecifier=TypeSpecifier
		public Assignment getTypeSpecifierAssignment_1() { return cTypeSpecifierAssignment_1; }
		
		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_1_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_1_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_0() { return cVisibilityVisibilityEnumRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('=' initialValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_4_1() { return cInitialValueAssignment_4_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_4_1_0() { return cInitialValueExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class StructDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.StructDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFeaturesVariableDefinitionParserRuleCall_3_0_0 = (RuleCall)cFeaturesAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructDefinition types::ComplexType:
		//	'struct' name=ID '{' (features+=VariableDefinition ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID '{' (features+=VariableDefinition ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(features+=VariableDefinition ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//features+=VariableDefinition
		public Assignment getFeaturesAssignment_3_0() { return cFeaturesAssignment_3_0; }
		
		//VariableDefinition
		public RuleCall getFeaturesVariableDefinitionParserRuleCall_3_0_0() { return cFeaturesVariableDefinitionParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ModifierDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ModifierDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifierDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListParameterListParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//ModifierDefinition types::Operation:
		//	{ModifierDefinition} 'modifier' name=ID list=ParameterList
		//	block+=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//{ModifierDefinition} 'modifier' name=ID list=ParameterList block+=Block
		public Group getGroup() { return cGroup; }
		
		//{ModifierDefinition}
		public Action getModifierDefinitionAction_0() { return cModifierDefinitionAction_0; }
		
		//'modifier'
		public Keyword getModifierKeyword_1() { return cModifierKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//list=ParameterList
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//ParameterList
		public RuleCall getListParameterListParserRuleCall_3_0() { return cListParameterListParserRuleCall_3_0; }
		
		//block+=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cParameterListAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_0 = (RuleCall)cParameterAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParameterList:
		//	'(' {ParameterList} parameter+=Parameter? (',' parameter+=Parameter)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' {ParameterList} parameter+=Parameter? (',' parameter+=Parameter)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{ParameterList}
		public Action getParameterListAction_1() { return cParameterListAction_1; }
		
		//parameter+=Parameter?
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_0() { return cParameterParameterParserRuleCall_2_0; }
		
		//(',' parameter+=Parameter)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_3_1() { return cParameterAssignment_3_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_0() { return cParameterParameterParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	'{' {Block} (expression+=Expression ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {Block} (expression+=Expression ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{Block}
		public Action getBlockAction_1() { return cBlockAction_1; }
		
		//(expression+=Expression ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModifierInvocationLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@ Override Literal expressions::Literal:
		//	super | ModifierInvocationLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//super | ModifierInvocationLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//ModifierInvocationLiteral
		public RuleCall getModifierInvocationLiteralParserRuleCall_1() { return cModifierInvocationLiteralParserRuleCall_1; }
	}
	public class ModifierInvocationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ModifierInvocationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifierInvocationLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ModifierInvocationLiteral:
		//	{ModifierInvocationLiteral} '_;';
		@Override public ParserRule getRule() { return rule; }
		
		//{ModifierInvocationLiteral} '_;'
		public Group getGroup() { return cGroup; }
		
		//{ModifierInvocationLiteral}
		public Action getModifierInvocationLiteralAction_0() { return cModifierInvocationLiteralAction_0; }
		
		//'_;'
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cExternalKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Keyword cPublicKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Keyword cInternalKeyword_6_2 = (Keyword)cAlternatives_6.eContents().get(2);
		private final Keyword cPrivateKeyword_6_3 = (Keyword)cAlternatives_6.eContents().get(3);
		private final Keyword cConstantKeyword_6_4 = (Keyword)cAlternatives_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cReturnsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cReturnTypesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cReturnTypesTypeSpecifierParserRuleCall_7_1_0 = (RuleCall)cReturnTypesAssignment_7_1.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_8_0 = (Keyword)cAlternatives_8.eContents().get(0);
		private final Assignment cBlockAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_8_1_0 = (RuleCall)cBlockAssignment_8_1.eContents().get(0);
		
		//FunctionDefinition types::Operation:
		//	{FunctionDefinition} 'function' name=ID? '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('external' |
		//	'public' | 'internal' | 'private' | 'constant')* ('returns' returnTypes+=TypeSpecifier*)? (';' | block=Block);
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDefinition} 'function' name=ID? '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('external' |
		//'public' | 'internal' | 'private' | 'constant')* ('returns' returnTypes+=TypeSpecifier*)? (';' | block=Block)
		public Group getGroup() { return cGroup; }
		
		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_0() { return cParametersParameterParserRuleCall_4_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_1_0() { return cParametersParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('external' | 'public' | 'internal' | 'private' | 'constant')*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'external'
		public Keyword getExternalKeyword_6_0() { return cExternalKeyword_6_0; }
		
		//'public'
		public Keyword getPublicKeyword_6_1() { return cPublicKeyword_6_1; }
		
		//'internal'
		public Keyword getInternalKeyword_6_2() { return cInternalKeyword_6_2; }
		
		//'private'
		public Keyword getPrivateKeyword_6_3() { return cPrivateKeyword_6_3; }
		
		//'constant'
		public Keyword getConstantKeyword_6_4() { return cConstantKeyword_6_4; }
		
		//('returns' returnTypes+=TypeSpecifier*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'returns'
		public Keyword getReturnsKeyword_7_0() { return cReturnsKeyword_7_0; }
		
		//returnTypes+=TypeSpecifier*
		public Assignment getReturnTypesAssignment_7_1() { return cReturnTypesAssignment_7_1; }
		
		//TypeSpecifier
		public RuleCall getReturnTypesTypeSpecifierParserRuleCall_7_1_0() { return cReturnTypesTypeSpecifierParserRuleCall_7_1_0; }
		
		//';' | block=Block
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//';'
		public Keyword getSemicolonKeyword_8_0() { return cSemicolonKeyword_8_0; }
		
		//block=Block
		public Assignment getBlockAssignment_8_1() { return cBlockAssignment_8_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_8_1_0() { return cBlockBlockParserRuleCall_8_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_0_0 = (RuleCall)cTypeSpecifierAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter types::Parameter:
		//	typeSpecifier=TypeSpecifier name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//typeSpecifier=TypeSpecifier name=ID
		public Group getGroup() { return cGroup; }
		
		//typeSpecifier=TypeSpecifier
		public Assignment getTypeSpecifierAssignment_0() { return cTypeSpecifierAssignment_0; }
		
		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_0_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.EventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EventDefinition types::Event:
		//	'event' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	public class ContractTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ContractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCONTRACTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCONTRACTContractKeyword_0_0 = (Keyword)cCONTRACTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLIBRARYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLIBRARYLibraryKeyword_1_0 = (Keyword)cLIBRARYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTERFACEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTERFACEInterfaceKeyword_2_0 = (Keyword)cINTERFACEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ContractType:
		//	CONTRACT='contract' | LIBRARY='library' | INTERFACE='interface';
		public EnumRule getRule() { return rule; }
		
		//CONTRACT='contract' | LIBRARY='library' | INTERFACE='interface'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CONTRACT='contract'
		public EnumLiteralDeclaration getCONTRACTEnumLiteralDeclaration_0() { return cCONTRACTEnumLiteralDeclaration_0; }
		
		//'contract'
		public Keyword getCONTRACTContractKeyword_0_0() { return cCONTRACTContractKeyword_0_0; }
		
		//LIBRARY='library'
		public EnumLiteralDeclaration getLIBRARYEnumLiteralDeclaration_1() { return cLIBRARYEnumLiteralDeclaration_1; }
		
		//'library'
		public Keyword getLIBRARYLibraryKeyword_1_0() { return cLIBRARYLibraryKeyword_1_0; }
		
		//INTERFACE='interface'
		public EnumLiteralDeclaration getINTERFACEEnumLiteralDeclaration_2() { return cINTERFACEEnumLiteralDeclaration_2; }
		
		//'interface'
		public Keyword getINTERFACEInterfaceKeyword_2_0() { return cINTERFACEInterfaceKeyword_2_0; }
	}
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTERNALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTERNALInternalKeyword_1_0 = (Keyword)cINTERNALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTANTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCONSTANTConstantKeyword_3_0 = (Keyword)cCONSTANTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	PUBLIC='public' | INTERNAL='internal' | PRIVATE='private' | CONSTANT='constant';
		public EnumRule getRule() { return rule; }
		
		//PUBLIC='public' | INTERNAL='internal' | PRIVATE='private' | CONSTANT='constant'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//INTERNAL='internal'
		public EnumLiteralDeclaration getINTERNALEnumLiteralDeclaration_1() { return cINTERNALEnumLiteralDeclaration_1; }
		
		//'internal'
		public Keyword getINTERNALInternalKeyword_1_0() { return cINTERNALInternalKeyword_1_0; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() { return cPRIVATEEnumLiteralDeclaration_2; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_2_0() { return cPRIVATEPrivateKeyword_2_0; }
		
		//CONSTANT='constant'
		public EnumLiteralDeclaration getCONSTANTEnumLiteralDeclaration_3() { return cCONSTANTEnumLiteralDeclaration_3; }
		
		//'constant'
		public Keyword getCONSTANTConstantKeyword_3_0() { return cCONSTANTConstantKeyword_3_0; }
	}
	
	private final SolidityModelElements pSolidityModel;
	private final TerminalRule tVERSION;
	private final SourceUnitElements pSourceUnit;
	private final PragmaDirectiveElements pPragmaDirective;
	private final ImportDirectiveElements pImportDirective;
	private final ContractDefinitionElements pContractDefinition;
	private final ContractTypeElements eContractType;
	private final ContractPartElements pContractPart;
	private final VariableDefinitionElements pVariableDefinition;
	private final VisibilityElements eVisibility;
	private final StructDefinitionElements pStructDefinition;
	private final ModifierDefinitionElements pModifierDefinition;
	private final ParameterListElements pParameterList;
	private final BlockElements pBlock;
	private final LiteralElements pLiteral;
	private final ModifierInvocationLiteralElements pModifierInvocationLiteral;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final ParameterElements pParameter;
	private final EventDefinitionElements pEventDefinition;
	
	private final Grammar grammar;
	
	private final ExpressionsGrammarAccess gaExpressions;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SolidityGrammarAccess(GrammarProvider grammarProvider,
			ExpressionsGrammarAccess gaExpressions,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaExpressions = gaExpressions;
		this.gaTerminals = gaTerminals;
		this.pSolidityModel = new SolidityModelElements();
		this.tVERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.VERSION");
		this.pSourceUnit = new SourceUnitElements();
		this.pPragmaDirective = new PragmaDirectiveElements();
		this.pImportDirective = new ImportDirectiveElements();
		this.pContractDefinition = new ContractDefinitionElements();
		this.eContractType = new ContractTypeElements();
		this.pContractPart = new ContractPartElements();
		this.pVariableDefinition = new VariableDefinitionElements();
		this.eVisibility = new VisibilityElements();
		this.pStructDefinition = new StructDefinitionElements();
		this.pModifierDefinition = new ModifierDefinitionElements();
		this.pParameterList = new ParameterListElements();
		this.pBlock = new BlockElements();
		this.pLiteral = new LiteralElements();
		this.pModifierInvocationLiteral = new ModifierInvocationLiteralElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pParameter = new ParameterElements();
		this.pEventDefinition = new EventDefinitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.yakindu.solidity.Solidity".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public ExpressionsGrammarAccess getExpressionsGrammarAccess() {
		return gaExpressions;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SolidityModel:
	//	sourceunit+=SourceUnit*;
	public SolidityModelElements getSolidityModelAccess() {
		return pSolidityModel;
	}
	
	public ParserRule getSolidityModelRule() {
		return getSolidityModelAccess().getRule();
	}
	
	//terminal VERSION:
	//	'^' INT . INT . INT;
	public TerminalRule getVERSIONRule() {
		return tVERSION;
	}
	
	//SourceUnit types::Package:
	//	{SourceUnit} pragma=PragmaDirective
	//	imports+=ImportDirective*
	//	member+=ContractDefinition*;
	public SourceUnitElements getSourceUnitAccess() {
		return pSourceUnit;
	}
	
	public ParserRule getSourceUnitRule() {
		return getSourceUnitAccess().getRule();
	}
	
	//PragmaDirective types::PackageMember:
	//	{PragmaDirective} 'pragma' 'solidity' version=VERSION ';';
	public PragmaDirectiveElements getPragmaDirectiveAccess() {
		return pPragmaDirective;
	}
	
	public ParserRule getPragmaDirectiveRule() {
		return getPragmaDirectiveAccess().getRule();
	}
	
	//ImportDirective types::PackageMember:
	//	{ImportDirective} 'import' importedNamespace=STRING ('as' alias=STRING)? ';';
	public ImportDirectiveElements getImportDirectiveAccess() {
		return pImportDirective;
	}
	
	public ParserRule getImportDirectiveRule() {
		return getImportDirectiveAccess().getRule();
	}
	
	//ContractDefinition types::ComplexType:
	//	{ContractDefinition} type=ContractType name=ID ('is' superTypes+=[types::ComplexType|QID] (','
	//	superTypes+=[types::ComplexType|QID])*)?
	//	'{' features+=ContractPart* '}';
	public ContractDefinitionElements getContractDefinitionAccess() {
		return pContractDefinition;
	}
	
	public ParserRule getContractDefinitionRule() {
		return getContractDefinitionAccess().getRule();
	}
	
	//enum ContractType:
	//	CONTRACT='contract' | LIBRARY='library' | INTERFACE='interface';
	public ContractTypeElements getContractTypeAccess() {
		return eContractType;
	}
	
	public EnumRule getContractTypeRule() {
		return getContractTypeAccess().getRule();
	}
	
	//ContractPart types::Declaration:
	//	VariableDefinition | ModifierDefinition | FunctionDefinition | EventDefinition;
	public ContractPartElements getContractPartAccess() {
		return pContractPart;
	}
	
	public ParserRule getContractPartRule() {
		return getContractPartAccess().getRule();
	}
	
	////StructDefinition | | EnumDefinition;
	//VariableDefinition types::Property:
	//	{VariableDefinition} typeSpecifier=TypeSpecifier visibility=Visibility? name=ID ('=' initialValue=Expression)? ';';
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return pVariableDefinition;
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}
	
	//enum Visibility:
	//	PUBLIC='public' | INTERNAL='internal' | PRIVATE='private' | CONSTANT='constant';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//StructDefinition types::ComplexType:
	//	'struct' name=ID '{' (features+=VariableDefinition ';')* '}';
	public StructDefinitionElements getStructDefinitionAccess() {
		return pStructDefinition;
	}
	
	public ParserRule getStructDefinitionRule() {
		return getStructDefinitionAccess().getRule();
	}
	
	//ModifierDefinition types::Operation:
	//	{ModifierDefinition} 'modifier' name=ID list=ParameterList
	//	block+=Block;
	public ModifierDefinitionElements getModifierDefinitionAccess() {
		return pModifierDefinition;
	}
	
	public ParserRule getModifierDefinitionRule() {
		return getModifierDefinitionAccess().getRule();
	}
	
	//ParameterList:
	//	'(' {ParameterList} parameter+=Parameter? (',' parameter+=Parameter)* ')';
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Block:
	//	'{' {Block} (expression+=Expression ';')* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//@ Override Literal expressions::Literal:
	//	super | ModifierInvocationLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//ModifierInvocationLiteral:
	//	{ModifierInvocationLiteral} '_;';
	public ModifierInvocationLiteralElements getModifierInvocationLiteralAccess() {
		return pModifierInvocationLiteral;
	}
	
	public ParserRule getModifierInvocationLiteralRule() {
		return getModifierInvocationLiteralAccess().getRule();
	}
	
	//FunctionDefinition types::Operation:
	//	{FunctionDefinition} 'function' name=ID? '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('external' |
	//	'public' | 'internal' | 'private' | 'constant')* ('returns' returnTypes+=TypeSpecifier*)? (';' | block=Block);
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//Parameter types::Parameter:
	//	typeSpecifier=TypeSpecifier name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//EventDefinition types::Event:
	//	'event' name=ID;
	public EventDefinitionElements getEventDefinitionAccess() {
		return pEventDefinition;
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}
	
	//Expression:
	//	AssignmentExpression;
	public ExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AssignmentExpression Expression:
	//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
	//	expression=ConditionalExpression)*;
	public ExpressionsGrammarAccess.AssignmentExpressionElements getAssignmentExpressionAccess() {
		return gaExpressions.getAssignmentExpressionAccess();
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//ConditionalExpression Expression:
	//	LogicalOrExpression ({ConditionalExpression.condition=current} '?' trueCase=LogicalOrExpression ':'
	//	falseCase=LogicalOrExpression)?;
	public ExpressionsGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaExpressions.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} LogicalOrOperator
	//	rightOperand=LogicalAndExpression)*;
	public ExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression Expression:
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} LogicalAndOperator
	//	rightOperand=LogicalNotExpression)*;
	public ExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//LogicalNotExpression Expression:
	//	BitwiseXorExpression | {LogicalNotExpression} LogicalNotOperator operand=BitwiseXorExpression;
	public ExpressionsGrammarAccess.LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return gaExpressions.getLogicalNotExpressionAccess();
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}
	
	//BitwiseXorExpression Expression:
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} BitwiseXOrOperator
	//	rightOperand=BitwiseOrExpression)*;
	public ExpressionsGrammarAccess.BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return gaExpressions.getBitwiseXorExpressionAccess();
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}
	
	//BitwiseOrExpression Expression:
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} BitwiseOrOperator
	//	rightOperand=BitwiseAndExpression)*;
	public ExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseAndExpression Expression:
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} BitwiseAndOperator
	//	rightOperand=LogicalRelationExpression)*;
	public ExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//LogicalRelationExpression Expression:
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=ShiftExpression)*;
	public ExpressionsGrammarAccess.LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return gaExpressions.getLogicalRelationExpressionAccess();
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}
	
	//ShiftExpression Expression:
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//	rightOperand=NumericalAddSubtractExpression)*;
	public ExpressionsGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaExpressions.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//NumericalAddSubtractExpression Expression:
	//	NumericalMultiplyDivideExpression => ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public ExpressionsGrammarAccess.NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return gaExpressions.getNumericalAddSubtractExpressionAccess();
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}
	
	//NumericalMultiplyDivideExpression Expression:
	//	NumericalUnaryExpression => ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=NumericalUnaryExpression)*;
	public ExpressionsGrammarAccess.NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return gaExpressions.getNumericalMultiplyDivideExpressionAccess();
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}
	
	//NumericalUnaryExpression Expression:
	//	TypeCastExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=TypeCastExpression;
	public ExpressionsGrammarAccess.NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return gaExpressions.getNumericalUnaryExpressionAccess();
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}
	
	//TypeCastExpression Expression:
	//	PrimaryExpression (({TypeCastExpression.operand=current} 'as') type=[types::Type|QID])*;
	public ExpressionsGrammarAccess.TypeCastExpressionElements getTypeCastExpressionAccess() {
		return gaExpressions.getTypeCastExpressionAccess();
	}
	
	public ParserRule getTypeCastExpressionRule() {
		return getTypeCastExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	PrimitiveValueExpression | FeatureCall | ParenthesizedExpression;
	public ExpressionsGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaExpressions.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//PrimitiveValueExpression Expression:
	//	{PrimitiveValueExpression} value=super::Literal;
	public ExpressionsGrammarAccess.PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return gaExpressions.getPrimitiveValueExpressionAccess();
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}
	
	//FeatureCall Expression:
	//	ElementReferenceExpression ({FeatureCall.owner=current} '.' feature=[ecore::EObject] (=> operationCall?='('
	//	(arguments+=Argument (',' arguments+=Argument)*)? ')' | => (arrayAccess?='[' arraySelector+=Expression ']') => ('['
	//	arraySelector+=Expression ']')*)?)*;
	public ExpressionsGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaExpressions.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}
	
	//ElementReferenceExpression Expression:
	//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?='(' (arguments+=Argument (','
	//	arguments+=Argument)*)? ')' | => (arrayAccess?='[' arraySelector+=Expression ']') => ('[' arraySelector+=Expression
	//	']')*)?;
	public ExpressionsGrammarAccess.ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return gaExpressions.getElementReferenceExpressionAccess();
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}
	
	//Argument:
	//	(parameter=[types::Parameter] '=')? value=ConditionalExpression;
	public ExpressionsGrammarAccess.ArgumentElements getArgumentAccess() {
		return gaExpressions.getArgumentAccess();
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//ParenthesizedExpression Expression:
	//	{ParenthesizedExpression} '(' expression=Expression ')';
	public ExpressionsGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaExpressions.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}
	
	//TypeSpecifier types::TypeSpecifier:
	//	type=[types::Type|QID] ('<' (typeArguments+=TypeSpecifier (',' typeArguments+=TypeSpecifier)* '>'))?;
	public ExpressionsGrammarAccess.TypeSpecifierElements getTypeSpecifierAccess() {
		return gaExpressions.getTypeSpecifierAccess();
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}
	
	//Literal:
	//	BoolLiteral | IntLiteral | HexLiteral | BinaryLiteral | DoubleLiteral | FloatLiteral | StringLiteral | NullLiteral;
	public ExpressionsGrammarAccess.LiteralElements getExpressionsLiteralAccess() {
		return gaExpressions.getLiteralAccess();
	}
	
	public ParserRule getExpressionsLiteralRule() {
		return getExpressionsLiteralAccess().getRule();
	}
	
	//BoolLiteral:
	//	{BoolLiteral} value=BOOL;
	public ExpressionsGrammarAccess.BoolLiteralElements getBoolLiteralAccess() {
		return gaExpressions.getBoolLiteralAccess();
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	{IntLiteral} value=INT;
	public ExpressionsGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaExpressions.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//DoubleLiteral:
	//	{DoubleLiteral} value=DOUBLE;
	public ExpressionsGrammarAccess.DoubleLiteralElements getDoubleLiteralAccess() {
		return gaExpressions.getDoubleLiteralAccess();
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}
	
	//FloatLiteral:
	//	{FloatLiteral} value=FLOAT;
	public ExpressionsGrammarAccess.FloatLiteralElements getFloatLiteralAccess() {
		return gaExpressions.getFloatLiteralAccess();
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}
	
	//HexLiteral:
	//	{HexLiteral} value=HEX;
	public ExpressionsGrammarAccess.HexLiteralElements getHexLiteralAccess() {
		return gaExpressions.getHexLiteralAccess();
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}
	
	//BinaryLiteral:
	//	{BinaryLiteral} value=BINARY;
	public ExpressionsGrammarAccess.BinaryLiteralElements getBinaryLiteralAccess() {
		return gaExpressions.getBinaryLiteralAccess();
	}
	
	public ParserRule getBinaryLiteralRule() {
		return getBinaryLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	{StringLiteral} value=STRING;
	public ExpressionsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaExpressions.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//NullLiteral:
	//	{NullLiteral} 'null';
	public ExpressionsGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaExpressions.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}
	
	//LogicalAndOperator:
	//	'&&';
	public ExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaExpressions.getLogicalAndOperatorAccess();
	}
	
	public ParserRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//LogicalOrOperator:
	//	'||';
	public ExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaExpressions.getLogicalOrOperatorAccess();
	}
	
	public ParserRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//LogicalNotOperator:
	//	'!';
	public ExpressionsGrammarAccess.LogicalNotOperatorElements getLogicalNotOperatorAccess() {
		return gaExpressions.getLogicalNotOperatorAccess();
	}
	
	public ParserRule getLogicalNotOperatorRule() {
		return getLogicalNotOperatorAccess().getRule();
	}
	
	//BitwiseXOrOperator:
	//	'^';
	public ExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public ParserRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//BitwiseOrOperator:
	//	'|';
	public ExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaExpressions.getBitwiseOrOperatorAccess();
	}
	
	public ParserRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//BitwiseAndOperator:
	//	'&';
	public ExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaExpressions.getBitwiseAndOperatorAccess();
	}
	
	public ParserRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum AssignmentOperator:
	//	assign='=' | multAssign='*=' | divAssign='/=' | modAssign='%=' | addAssign='+=' | subAssign='-=' |
	//	leftShiftAssign='<<=' | rightShiftAssign='>>=' | andAssign='&=' | xorAssign='^=' | orAssign='|=';
	public ExpressionsGrammarAccess.AssignmentOperatorElements getAssignmentOperatorAccess() {
		return gaExpressions.getAssignmentOperatorAccess();
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//enum ShiftOperator:
	//	left='<<' | right='>>';
	public ExpressionsGrammarAccess.ShiftOperatorElements getShiftOperatorAccess() {
		return gaExpressions.getShiftOperatorAccess();
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}
	
	//enum AdditiveOperator:
	//	plus='+' | minus='-';
	public ExpressionsGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaExpressions.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//enum MultiplicativeOperator:
	//	mul='*' | div='/' | mod='%';
	public ExpressionsGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaExpressions.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//enum UnaryOperator:
	//	positive='+' | negative='-' | complement='~';
	public ExpressionsGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaExpressions.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//enum RelationalOperator:
	//	smaller='<' | smallerEqual='<=' | greater='>' | greaterEqual='>=' | equals='==' | notEquals='!=';
	public ExpressionsGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaExpressions.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//terminal BOOL returns ecore::EBoolean:
	//	'true' | 'false' | 'yes' | 'no';
	public TerminalRule getBOOLRule() {
		return gaExpressions.getBOOLRule();
	}
	
	//terminal HEX returns ecore::EInt:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return gaExpressions.getHEXRule();
	}
	
	//terminal BINARY returns ecore::EInt:
	//	'0' ('b' | 'B') ('0' | '1')+;
	public TerminalRule getBINARYRule() {
		return gaExpressions.getBINARYRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	(INT '.' INT) ('e' ('-' | '+') INT)? ('d' | 'D')?;
	public TerminalRule getDOUBLERule() {
		return gaExpressions.getDOUBLERule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	(INT '.' INT) ('e' ('-' | '+') INT)? ('f' | 'F')?;
	public TerminalRule getFLOATRule() {
		return gaExpressions.getFLOATRule();
	}
	
	//QID:
	//	ID ('.' ID)*;
	public ExpressionsGrammarAccess.QIDElements getQIDAccess() {
		return gaExpressions.getQIDAccess();
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.12.0
 */
package com.yakindu.solidity.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.yakindu.base.expressions.services.ExpressionsGrammarAccess;

@Singleton
public class SolidityGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SolidityModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.SolidityModel");
		private final Assignment cSourceunitAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSourceunitSourceUnitParserRuleCall_0 = (RuleCall)cSourceunitAssignment.eContents().get(0);
		
		//SolidityModel:
		//	sourceunit+=SourceUnit*;
		@Override public ParserRule getRule() { return rule; }
		
		//sourceunit+=SourceUnit*
		public Assignment getSourceunitAssignment() { return cSourceunitAssignment; }
		
		//SourceUnit
		public RuleCall getSourceunitSourceUnitParserRuleCall_0() { return cSourceunitSourceUnitParserRuleCall_0; }
	}
	public class SourceUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.SourceUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPragmaDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContractDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SourceUnit:
		//	PragmaDirective | ImportDirective | ContractDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//PragmaDirective | ImportDirective | ContractDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PragmaDirective
		public RuleCall getPragmaDirectiveParserRuleCall_0() { return cPragmaDirectiveParserRuleCall_0; }
		
		//ImportDirective
		public RuleCall getImportDirectiveParserRuleCall_1() { return cImportDirectiveParserRuleCall_1; }
		
		//ContractDefinition
		public RuleCall getContractDefinitionParserRuleCall_2() { return cContractDefinitionParserRuleCall_2; }
	}
	public class PragmaDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.PragmaDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSolidityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdVERSIONTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PragmaDirective:
		//	'pragma' 'solidity' id=VERSION ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'pragma' 'solidity' id=VERSION ';'
		public Group getGroup() { return cGroup; }
		
		//'pragma'
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }
		
		//'solidity'
		public Keyword getSolidityKeyword_1() { return cSolidityKeyword_1; }
		
		//id=VERSION
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//VERSION
		public RuleCall getIdVERSIONTerminalRuleCall_2_0() { return cIdVERSIONTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ImportDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ImportDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceSTRINGTerminalRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ImportDirective:
		//	'import' importedNamespace=STRING ('as' alias=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=STRING ('as' alias=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=STRING
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//STRING
		public RuleCall getImportedNamespaceSTRINGTerminalRuleCall_1_0() { return cImportedNamespaceSTRINGTerminalRuleCall_1_0; }
		
		//('as' alias=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//alias=STRING
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//STRING
		public RuleCall getAliasSTRINGTerminalRuleCall_2_1_0() { return cAliasSTRINGTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ContractDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ContractDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeContractTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypeInheritanceSpecifierParserRuleCall_2_1_0 = (RuleCall)cSuperTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSuperTypeInheritanceSpecifierParserRuleCall_2_2_1_0 = (RuleCall)cSuperTypeAssignment_2_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPartsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPartsContractPartParserRuleCall_4_0 = (RuleCall)cPartsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// | 'import' ('*' | Identifier) ('as' Identifier)? 'from' StringLiteral ';'
		//// | 'import' '{' Identifier ('as' Identifier)? ( ',' Identifier ('as' Identifier)? )* '}' 'from' StringLiteral ';'
		//ContractDefinition:
		//	type=ContractType name=ID ('is' superType+=InheritanceSpecifier (',' superType+=InheritanceSpecifier)*)?
		//	'{' parts+=ContractPart* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ContractType name=ID ('is' superType+=InheritanceSpecifier (',' superType+=InheritanceSpecifier)*)? '{'
		//parts+=ContractPart* '}'
		public Group getGroup() { return cGroup; }
		
		//type=ContractType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ContractType
		public RuleCall getTypeContractTypeEnumRuleCall_0_0() { return cTypeContractTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('is' superType+=InheritanceSpecifier (',' superType+=InheritanceSpecifier)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'is'
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//superType+=InheritanceSpecifier
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//InheritanceSpecifier
		public RuleCall getSuperTypeInheritanceSpecifierParserRuleCall_2_1_0() { return cSuperTypeInheritanceSpecifierParserRuleCall_2_1_0; }
		
		//(',' superType+=InheritanceSpecifier)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//superType+=InheritanceSpecifier
		public Assignment getSuperTypeAssignment_2_2_1() { return cSuperTypeAssignment_2_2_1; }
		
		//InheritanceSpecifier
		public RuleCall getSuperTypeInheritanceSpecifierParserRuleCall_2_2_1_0() { return cSuperTypeInheritanceSpecifierParserRuleCall_2_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//parts+=ContractPart*
		public Assignment getPartsAssignment_4() { return cPartsAssignment_4; }
		
		//ContractPart
		public RuleCall getPartsContractPartParserRuleCall_4_0() { return cPartsContractPartParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InheritanceSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.InheritanceSpecifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//InheritanceSpecifier:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ContractPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ContractPart");
		private final Assignment cPartsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cPartsAlternatives_0 = (Alternatives)cPartsAssignment.eContents().get(0);
		private final RuleCall cPartsVariableDeclarationParserRuleCall_0_0 = (RuleCall)cPartsAlternatives_0.eContents().get(0);
		private final RuleCall cPartsStructDefinitionParserRuleCall_0_1 = (RuleCall)cPartsAlternatives_0.eContents().get(1);
		private final RuleCall cPartsModifierDefinitionParserRuleCall_0_2 = (RuleCall)cPartsAlternatives_0.eContents().get(2);
		private final RuleCall cPartsFunctionDefinitionParserRuleCall_0_3 = (RuleCall)cPartsAlternatives_0.eContents().get(3);
		private final RuleCall cPartsEventDefinitionParserRuleCall_0_4 = (RuleCall)cPartsAlternatives_0.eContents().get(4);
		private final RuleCall cPartsEnumDefinitionParserRuleCall_0_5 = (RuleCall)cPartsAlternatives_0.eContents().get(5);
		
		//// UserDefinedTypeName ( '(' Expression ( ',' Expression )* ')' )?
		//ContractPart:
		//	parts+=(VariableDeclaration | StructDefinition | ModifierDefinition | FunctionDefinition | EventDefinition |
		//	EnumDefinition);
		@Override public ParserRule getRule() { return rule; }
		
		//parts+=(VariableDeclaration | StructDefinition | ModifierDefinition | FunctionDefinition | EventDefinition |
		//EnumDefinition)
		public Assignment getPartsAssignment() { return cPartsAssignment; }
		
		//(VariableDeclaration | StructDefinition | ModifierDefinition | FunctionDefinition | EventDefinition | EnumDefinition)
		public Alternatives getPartsAlternatives_0() { return cPartsAlternatives_0; }
		
		//VariableDeclaration
		public RuleCall getPartsVariableDeclarationParserRuleCall_0_0() { return cPartsVariableDeclarationParserRuleCall_0_0; }
		
		////UsingForDeclaration
		//StructDefinition
		public RuleCall getPartsStructDefinitionParserRuleCall_0_1() { return cPartsStructDefinitionParserRuleCall_0_1; }
		
		//ModifierDefinition
		public RuleCall getPartsModifierDefinitionParserRuleCall_0_2() { return cPartsModifierDefinitionParserRuleCall_0_2; }
		
		//FunctionDefinition
		public RuleCall getPartsFunctionDefinitionParserRuleCall_0_3() { return cPartsFunctionDefinitionParserRuleCall_0_3; }
		
		//EventDefinition
		public RuleCall getPartsEventDefinitionParserRuleCall_0_4() { return cPartsEventDefinitionParserRuleCall_0_4; }
		
		//EnumDefinition
		public RuleCall getPartsEnumDefinitionParserRuleCall_0_5() { return cPartsEnumDefinitionParserRuleCall_0_5; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEObjectCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEObjectQIDParserRuleCall_0_0_1 = (RuleCall)cTypeEObjectCrossReference_0_0.eContents().get(1);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		
		//VariableDeclaration:
		//	type=[EObject|QID] visibility=Visibility? name=ID ('=' initialValue=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[EObject|QID] visibility=Visibility? name=ID ('=' initialValue=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=[EObject|QID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[EObject|QID]
		public CrossReference getTypeEObjectCrossReference_0_0() { return cTypeEObjectCrossReference_0_0; }
		
		//QID
		public RuleCall getTypeEObjectQIDParserRuleCall_0_0_1() { return cTypeEObjectQIDParserRuleCall_0_0_1; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('=' initialValue=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_3_1_0() { return cInitialValueExpressionParserRuleCall_3_1_0; }
	}
	public class StructDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.StructDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cDeclarationsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TODOD
		////UsingForDeclaration:
		////	'using' Identifier 'for' ('*' | TypeName) ';'
		////;
		//StructDefinition:
		//	'struct' name=ID '{' (declarations+=VariableDeclaration ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID '{' (declarations+=VariableDeclaration ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(declarations+=VariableDeclaration ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_3_0() { return cDeclarationsAssignment_3_0; }
		
		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_3_0_0() { return cDeclarationsVariableDeclarationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ModifierDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ModifierDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListParameterListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//ModifierDefinition:
		//	'modifier' name=ID list=ParameterList
		//	block+=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'modifier' name=ID list=ParameterList block+=Block
		public Group getGroup() { return cGroup; }
		
		//'modifier'
		public Keyword getModifierKeyword_0() { return cModifierKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//list=ParameterList
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//ParameterList
		public RuleCall getListParameterListParserRuleCall_2_0() { return cListParameterListParserRuleCall_2_0; }
		
		//block+=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cParameterListAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_0 = (RuleCall)cParameterAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParameterList:
		//	'(' {ParameterList} parameter+=Parameter? (',' parameter+=Parameter)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' {ParameterList} parameter+=Parameter? (',' parameter+=Parameter)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{ParameterList}
		public Action getParameterListAction_1() { return cParameterListAction_1; }
		
		//parameter+=Parameter?
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_0() { return cParameterParameterParserRuleCall_2_0; }
		
		//(',' parameter+=Parameter)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_3_1() { return cParameterAssignment_3_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_0() { return cParameterParameterParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	'{' {Block} (expression+=Expression ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {Block} (expression+=Expression ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{Block}
		public Action getBlockAction_1() { return cBlockAction_1; }
		
		//(expression+=Expression ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModifierInvocationLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@ Override Literal expressions::Literal:
		//	super | ModifierInvocationLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//super | ModifierInvocationLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//ModifierInvocationLiteral
		public RuleCall getModifierInvocationLiteralParserRuleCall_1() { return cModifierInvocationLiteralParserRuleCall_1; }
	}
	public class ModifierInvocationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ModifierInvocationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifierInvocationLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ModifierInvocationLiteral:
		//	{ModifierInvocationLiteral} '_;';
		@Override public ParserRule getRule() { return rule; }
		
		//{ModifierInvocationLiteral} '_;'
		public Group getGroup() { return cGroup; }
		
		//{ModifierInvocationLiteral}
		public Action getModifierInvocationLiteralAction_0() { return cModifierInvocationLiteralAction_0; }
		
		//'_;'
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterParameterListParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cExternalKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cPublicKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cInternalKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Keyword cPrivateKeyword_3_3 = (Keyword)cAlternatives_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReturnsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnParameterParameterListParserRuleCall_4_1_0 = (RuleCall)cReturnParameterAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cBlockAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_5_1_0 = (RuleCall)cBlockAssignment_5_1.eContents().get(0);
		
		//FunctionDefinition:
		//	'function' name=ID? parameter=ParameterList ('external' | 'public' | 'internal' | 'private')* ('returns'
		//	returnParameter=ParameterList)? (';' | block=Block);
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID? parameter=ParameterList ('external' | 'public' | 'internal' | 'private')* ('returns'
		//returnParameter=ParameterList)? (';' | block=Block)
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameter=ParameterList
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }
		
		//ParameterList
		public RuleCall getParameterParameterListParserRuleCall_2_0() { return cParameterParameterListParserRuleCall_2_0; }
		
		//('external' | 'public' | 'internal' | 'private')*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'external'
		public Keyword getExternalKeyword_3_0() { return cExternalKeyword_3_0; }
		
		//'public'
		public Keyword getPublicKeyword_3_1() { return cPublicKeyword_3_1; }
		
		//'internal'
		public Keyword getInternalKeyword_3_2() { return cInternalKeyword_3_2; }
		
		//'private'
		public Keyword getPrivateKeyword_3_3() { return cPrivateKeyword_3_3; }
		
		//('returns' returnParameter=ParameterList)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'returns'
		public Keyword getReturnsKeyword_4_0() { return cReturnsKeyword_4_0; }
		
		//returnParameter=ParameterList
		public Assignment getReturnParameterAssignment_4_1() { return cReturnParameterAssignment_4_1; }
		
		//ParameterList
		public RuleCall getReturnParameterParameterListParserRuleCall_4_1_0() { return cReturnParameterParameterListParserRuleCall_4_1_0; }
		
		//';' | block=Block
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }
		
		//block=Block
		public Assignment getBlockAssignment_5_1() { return cBlockAssignment_5_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_5_1_0() { return cBlockBlockParserRuleCall_5_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cVarArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_1_0 = (Keyword)cVarArgsAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeSpecifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_3_0 = (RuleCall)cTypeSpecifierAssignment_3.eContents().get(0);
		
		//Parameter:
		//	name=ID varArgs?='...'? ':' typeSpecifier=TypeSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID varArgs?='...'? ':' typeSpecifier=TypeSpecifier
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//varArgs?='...'?
		public Assignment getVarArgsAssignment_1() { return cVarArgsAssignment_1; }
		
		//'...'
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_1_0() { return cVarArgsFullStopFullStopFullStopKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//typeSpecifier=TypeSpecifier
		public Assignment getTypeSpecifierAssignment_3() { return cTypeSpecifierAssignment_3; }
		
		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_3_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_3_0; }
	}
	public class EventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.EventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EventDefinition:
		//	'event' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EnumDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.EnumDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////TODO IndexedParameterList 'anonymous' ? ';' ;
		////
		////EnumValue = Identifier
		//EnumDefinition:
		//	'enum' name=ID '{' value+=STRING? (',' value+=STRING)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' value+=STRING? (',' value+=STRING)* '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//value+=STRING?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
		
		//(',' value+=STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//value+=STRING
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_1_0() { return cValueSTRINGTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	public class ContractTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.ContractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCONTRACTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCONTRACTContractKeyword_0_0 = (Keyword)cCONTRACTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLIBRARYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLIBRARYLibraryKeyword_1_0 = (Keyword)cLIBRARYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTERFACEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTERFACEInterfaceKeyword_2_0 = (Keyword)cINTERFACEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ContractType:
		//	CONTRACT='contract' | LIBRARY='library' | INTERFACE='interface';
		public EnumRule getRule() { return rule; }
		
		//CONTRACT='contract' | LIBRARY='library' | INTERFACE='interface'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CONTRACT='contract'
		public EnumLiteralDeclaration getCONTRACTEnumLiteralDeclaration_0() { return cCONTRACTEnumLiteralDeclaration_0; }
		
		//'contract'
		public Keyword getCONTRACTContractKeyword_0_0() { return cCONTRACTContractKeyword_0_0; }
		
		//LIBRARY='library'
		public EnumLiteralDeclaration getLIBRARYEnumLiteralDeclaration_1() { return cLIBRARYEnumLiteralDeclaration_1; }
		
		//'library'
		public Keyword getLIBRARYLibraryKeyword_1_0() { return cLIBRARYLibraryKeyword_1_0; }
		
		//INTERFACE='interface'
		public EnumLiteralDeclaration getINTERFACEEnumLiteralDeclaration_2() { return cINTERFACEEnumLiteralDeclaration_2; }
		
		//'interface'
		public Keyword getINTERFACEInterfaceKeyword_2_0() { return cINTERFACEInterfaceKeyword_2_0; }
	}
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTERNALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTERNALInternalKeyword_1_0 = (Keyword)cINTERNALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTANTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCONSTANTConstantKeyword_3_0 = (Keyword)cCONSTANTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	PUBLIC='public' | INTERNAL='internal' | PRIVATE='private' | CONSTANT='constant';
		public EnumRule getRule() { return rule; }
		
		//PUBLIC='public' | INTERNAL='internal' | PRIVATE='private' | CONSTANT='constant'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//INTERNAL='internal'
		public EnumLiteralDeclaration getINTERNALEnumLiteralDeclaration_1() { return cINTERNALEnumLiteralDeclaration_1; }
		
		//'internal'
		public Keyword getINTERNALInternalKeyword_1_0() { return cINTERNALInternalKeyword_1_0; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() { return cPRIVATEEnumLiteralDeclaration_2; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_2_0() { return cPRIVATEPrivateKeyword_2_0; }
		
		//CONSTANT='constant'
		public EnumLiteralDeclaration getCONSTANTEnumLiteralDeclaration_3() { return cCONSTANTEnumLiteralDeclaration_3; }
		
		//'constant'
		public Keyword getCONSTANTConstantKeyword_3_0() { return cCONSTANTConstantKeyword_3_0; }
	}
	
	private final SolidityModelElements pSolidityModel;
	private final TerminalRule tVERSION;
	private final SourceUnitElements pSourceUnit;
	private final PragmaDirectiveElements pPragmaDirective;
	private final ImportDirectiveElements pImportDirective;
	private final ContractDefinitionElements pContractDefinition;
	private final ContractTypeElements eContractType;
	private final InheritanceSpecifierElements pInheritanceSpecifier;
	private final ContractPartElements pContractPart;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VisibilityElements eVisibility;
	private final StructDefinitionElements pStructDefinition;
	private final ModifierDefinitionElements pModifierDefinition;
	private final ParameterListElements pParameterList;
	private final BlockElements pBlock;
	private final LiteralElements pLiteral;
	private final ModifierInvocationLiteralElements pModifierInvocationLiteral;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final ParameterElements pParameter;
	private final EventDefinitionElements pEventDefinition;
	private final EnumDefinitionElements pEnumDefinition;
	
	private final Grammar grammar;
	
	private final ExpressionsGrammarAccess gaExpressions;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SolidityGrammarAccess(GrammarProvider grammarProvider,
			ExpressionsGrammarAccess gaExpressions,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaExpressions = gaExpressions;
		this.gaTerminals = gaTerminals;
		this.pSolidityModel = new SolidityModelElements();
		this.tVERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yakindu.solidity.Solidity.VERSION");
		this.pSourceUnit = new SourceUnitElements();
		this.pPragmaDirective = new PragmaDirectiveElements();
		this.pImportDirective = new ImportDirectiveElements();
		this.pContractDefinition = new ContractDefinitionElements();
		this.eContractType = new ContractTypeElements();
		this.pInheritanceSpecifier = new InheritanceSpecifierElements();
		this.pContractPart = new ContractPartElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.eVisibility = new VisibilityElements();
		this.pStructDefinition = new StructDefinitionElements();
		this.pModifierDefinition = new ModifierDefinitionElements();
		this.pParameterList = new ParameterListElements();
		this.pBlock = new BlockElements();
		this.pLiteral = new LiteralElements();
		this.pModifierInvocationLiteral = new ModifierInvocationLiteralElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pParameter = new ParameterElements();
		this.pEventDefinition = new EventDefinitionElements();
		this.pEnumDefinition = new EnumDefinitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.yakindu.solidity.Solidity".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public ExpressionsGrammarAccess getExpressionsGrammarAccess() {
		return gaExpressions;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SolidityModel:
	//	sourceunit+=SourceUnit*;
	public SolidityModelElements getSolidityModelAccess() {
		return pSolidityModel;
	}
	
	public ParserRule getSolidityModelRule() {
		return getSolidityModelAccess().getRule();
	}
	
	//terminal VERSION:
	//	'^' INT . INT . INT;
	public TerminalRule getVERSIONRule() {
		return tVERSION;
	}
	
	//SourceUnit:
	//	PragmaDirective | ImportDirective | ContractDefinition;
	public SourceUnitElements getSourceUnitAccess() {
		return pSourceUnit;
	}
	
	public ParserRule getSourceUnitRule() {
		return getSourceUnitAccess().getRule();
	}
	
	//PragmaDirective:
	//	'pragma' 'solidity' id=VERSION ';';
	public PragmaDirectiveElements getPragmaDirectiveAccess() {
		return pPragmaDirective;
	}
	
	public ParserRule getPragmaDirectiveRule() {
		return getPragmaDirectiveAccess().getRule();
	}
	
	//ImportDirective:
	//	'import' importedNamespace=STRING ('as' alias=STRING)? ';';
	public ImportDirectiveElements getImportDirectiveAccess() {
		return pImportDirective;
	}
	
	public ParserRule getImportDirectiveRule() {
		return getImportDirectiveAccess().getRule();
	}
	
	//// | 'import' ('*' | Identifier) ('as' Identifier)? 'from' StringLiteral ';'
	//// | 'import' '{' Identifier ('as' Identifier)? ( ',' Identifier ('as' Identifier)? )* '}' 'from' StringLiteral ';'
	//ContractDefinition:
	//	type=ContractType name=ID ('is' superType+=InheritanceSpecifier (',' superType+=InheritanceSpecifier)*)?
	//	'{' parts+=ContractPart* '}';
	public ContractDefinitionElements getContractDefinitionAccess() {
		return pContractDefinition;
	}
	
	public ParserRule getContractDefinitionRule() {
		return getContractDefinitionAccess().getRule();
	}
	
	//enum ContractType:
	//	CONTRACT='contract' | LIBRARY='library' | INTERFACE='interface';
	public ContractTypeElements getContractTypeAccess() {
		return eContractType;
	}
	
	public EnumRule getContractTypeRule() {
		return getContractTypeAccess().getRule();
	}
	
	//InheritanceSpecifier:
	//	name=ID;
	public InheritanceSpecifierElements getInheritanceSpecifierAccess() {
		return pInheritanceSpecifier;
	}
	
	public ParserRule getInheritanceSpecifierRule() {
		return getInheritanceSpecifierAccess().getRule();
	}
	
	//// UserDefinedTypeName ( '(' Expression ( ',' Expression )* ')' )?
	//ContractPart:
	//	parts+=(VariableDeclaration | StructDefinition | ModifierDefinition | FunctionDefinition | EventDefinition |
	//	EnumDefinition);
	public ContractPartElements getContractPartAccess() {
		return pContractPart;
	}
	
	public ParserRule getContractPartRule() {
		return getContractPartAccess().getRule();
	}
	
	//VariableDeclaration:
	//	type=[EObject|QID] visibility=Visibility? name=ID ('=' initialValue=Expression)?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//enum Visibility:
	//	PUBLIC='public' | INTERNAL='internal' | PRIVATE='private' | CONSTANT='constant';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	////TODOD
	////UsingForDeclaration:
	////	'using' Identifier 'for' ('*' | TypeName) ';'
	////;
	//StructDefinition:
	//	'struct' name=ID '{' (declarations+=VariableDeclaration ';')* '}';
	public StructDefinitionElements getStructDefinitionAccess() {
		return pStructDefinition;
	}
	
	public ParserRule getStructDefinitionRule() {
		return getStructDefinitionAccess().getRule();
	}
	
	//ModifierDefinition:
	//	'modifier' name=ID list=ParameterList
	//	block+=Block;
	public ModifierDefinitionElements getModifierDefinitionAccess() {
		return pModifierDefinition;
	}
	
	public ParserRule getModifierDefinitionRule() {
		return getModifierDefinitionAccess().getRule();
	}
	
	//ParameterList:
	//	'(' {ParameterList} parameter+=Parameter? (',' parameter+=Parameter)* ')';
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Block:
	//	'{' {Block} (expression+=Expression ';')* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//@ Override Literal expressions::Literal:
	//	super | ModifierInvocationLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//ModifierInvocationLiteral:
	//	{ModifierInvocationLiteral} '_;';
	public ModifierInvocationLiteralElements getModifierInvocationLiteralAccess() {
		return pModifierInvocationLiteral;
	}
	
	public ParserRule getModifierInvocationLiteralRule() {
		return getModifierInvocationLiteralAccess().getRule();
	}
	
	//FunctionDefinition:
	//	'function' name=ID? parameter=ParameterList ('external' | 'public' | 'internal' | 'private')* ('returns'
	//	returnParameter=ParameterList)? (';' | block=Block);
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//Parameter:
	//	name=ID varArgs?='...'? ':' typeSpecifier=TypeSpecifier;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//EventDefinition:
	//	'event' name=ID;
	public EventDefinitionElements getEventDefinitionAccess() {
		return pEventDefinition;
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}
	
	////TODO IndexedParameterList 'anonymous' ? ';' ;
	////
	////EnumValue = Identifier
	//EnumDefinition:
	//	'enum' name=ID '{' value+=STRING? (',' value+=STRING)* '}';
	public EnumDefinitionElements getEnumDefinitionAccess() {
		return pEnumDefinition;
	}
	
	public ParserRule getEnumDefinitionRule() {
		return getEnumDefinitionAccess().getRule();
	}
	
	//Expression:
	//	AssignmentExpression;
	public ExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AssignmentExpression Expression:
	//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
	//	expression=ConditionalExpression)*;
	public ExpressionsGrammarAccess.AssignmentExpressionElements getAssignmentExpressionAccess() {
		return gaExpressions.getAssignmentExpressionAccess();
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//ConditionalExpression Expression:
	//	LogicalOrExpression ({ConditionalExpression.condition=current} '?' trueCase=LogicalOrExpression ':'
	//	falseCase=LogicalOrExpression)?;
	public ExpressionsGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaExpressions.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} LogicalOrOperator
	//	rightOperand=LogicalAndExpression)*;
	public ExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression Expression:
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} LogicalAndOperator
	//	rightOperand=LogicalNotExpression)*;
	public ExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//LogicalNotExpression Expression:
	//	BitwiseXorExpression | {LogicalNotExpression} LogicalNotOperator operand=BitwiseXorExpression;
	public ExpressionsGrammarAccess.LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return gaExpressions.getLogicalNotExpressionAccess();
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}
	
	//BitwiseXorExpression Expression:
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} BitwiseXOrOperator
	//	rightOperand=BitwiseOrExpression)*;
	public ExpressionsGrammarAccess.BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return gaExpressions.getBitwiseXorExpressionAccess();
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}
	
	//BitwiseOrExpression Expression:
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} BitwiseOrOperator
	//	rightOperand=BitwiseAndExpression)*;
	public ExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseAndExpression Expression:
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} BitwiseAndOperator
	//	rightOperand=LogicalRelationExpression)*;
	public ExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//LogicalRelationExpression Expression:
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=ShiftExpression)*;
	public ExpressionsGrammarAccess.LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return gaExpressions.getLogicalRelationExpressionAccess();
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}
	
	//ShiftExpression Expression:
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//	rightOperand=NumericalAddSubtractExpression)*;
	public ExpressionsGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaExpressions.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//NumericalAddSubtractExpression Expression:
	//	NumericalMultiplyDivideExpression => ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public ExpressionsGrammarAccess.NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return gaExpressions.getNumericalAddSubtractExpressionAccess();
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}
	
	//NumericalMultiplyDivideExpression Expression:
	//	NumericalUnaryExpression => ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=NumericalUnaryExpression)*;
	public ExpressionsGrammarAccess.NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return gaExpressions.getNumericalMultiplyDivideExpressionAccess();
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}
	
	//NumericalUnaryExpression Expression:
	//	TypeCastExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=TypeCastExpression;
	public ExpressionsGrammarAccess.NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return gaExpressions.getNumericalUnaryExpressionAccess();
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}
	
	//TypeCastExpression Expression:
	//	PrimaryExpression (({TypeCastExpression.operand=current} 'as') type=[types::Type|QID])*;
	public ExpressionsGrammarAccess.TypeCastExpressionElements getTypeCastExpressionAccess() {
		return gaExpressions.getTypeCastExpressionAccess();
	}
	
	public ParserRule getTypeCastExpressionRule() {
		return getTypeCastExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	PrimitiveValueExpression | FeatureCall | ParenthesizedExpression;
	public ExpressionsGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaExpressions.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//PrimitiveValueExpression Expression:
	//	{PrimitiveValueExpression} value=super::Literal;
	public ExpressionsGrammarAccess.PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return gaExpressions.getPrimitiveValueExpressionAccess();
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}
	
	//FeatureCall Expression:
	//	ElementReferenceExpression ({FeatureCall.owner=current} '.' feature=[ecore::EObject] (=> operationCall?='('
	//	(arguments+=Argument (',' arguments+=Argument)*)? ')' | => (arrayAccess?='[' arraySelector+=Expression ']') => ('['
	//	arraySelector+=Expression ']')*)?)*;
	public ExpressionsGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaExpressions.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}
	
	//ElementReferenceExpression Expression:
	//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?='(' (arguments+=Argument (','
	//	arguments+=Argument)*)? ')' | => (arrayAccess?='[' arraySelector+=Expression ']') => ('[' arraySelector+=Expression
	//	']')*)?;
	public ExpressionsGrammarAccess.ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return gaExpressions.getElementReferenceExpressionAccess();
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}
	
	//Argument:
	//	(parameter=[types::Parameter] '=')? value=ConditionalExpression;
	public ExpressionsGrammarAccess.ArgumentElements getArgumentAccess() {
		return gaExpressions.getArgumentAccess();
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//ParenthesizedExpression Expression:
	//	{ParenthesizedExpression} '(' expression=Expression ')';
	public ExpressionsGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaExpressions.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}
	
	//TypeSpecifier types::TypeSpecifier:
	//	type=[types::Type|QID] ('<' (typeArguments+=TypeSpecifier (',' typeArguments+=TypeSpecifier)* '>'))?;
	public ExpressionsGrammarAccess.TypeSpecifierElements getTypeSpecifierAccess() {
		return gaExpressions.getTypeSpecifierAccess();
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}
	
	//Literal:
	//	BoolLiteral | IntLiteral | HexLiteral | BinaryLiteral | DoubleLiteral | FloatLiteral | StringLiteral | NullLiteral;
	public ExpressionsGrammarAccess.LiteralElements getExpressionsLiteralAccess() {
		return gaExpressions.getLiteralAccess();
	}
	
	public ParserRule getExpressionsLiteralRule() {
		return getExpressionsLiteralAccess().getRule();
	}
	
	//BoolLiteral:
	//	{BoolLiteral} value=BOOL;
	public ExpressionsGrammarAccess.BoolLiteralElements getBoolLiteralAccess() {
		return gaExpressions.getBoolLiteralAccess();
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	{IntLiteral} value=INT;
	public ExpressionsGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaExpressions.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//DoubleLiteral:
	//	{DoubleLiteral} value=DOUBLE;
	public ExpressionsGrammarAccess.DoubleLiteralElements getDoubleLiteralAccess() {
		return gaExpressions.getDoubleLiteralAccess();
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}
	
	//FloatLiteral:
	//	{FloatLiteral} value=FLOAT;
	public ExpressionsGrammarAccess.FloatLiteralElements getFloatLiteralAccess() {
		return gaExpressions.getFloatLiteralAccess();
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}
	
	//HexLiteral:
	//	{HexLiteral} value=HEX;
	public ExpressionsGrammarAccess.HexLiteralElements getHexLiteralAccess() {
		return gaExpressions.getHexLiteralAccess();
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}
	
	//BinaryLiteral:
	//	{BinaryLiteral} value=BINARY;
	public ExpressionsGrammarAccess.BinaryLiteralElements getBinaryLiteralAccess() {
		return gaExpressions.getBinaryLiteralAccess();
	}
	
	public ParserRule getBinaryLiteralRule() {
		return getBinaryLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	{StringLiteral} value=STRING;
	public ExpressionsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaExpressions.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//NullLiteral:
	//	{NullLiteral} 'null';
	public ExpressionsGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaExpressions.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}
	
	//LogicalAndOperator:
	//	'&&';
	public ExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaExpressions.getLogicalAndOperatorAccess();
	}
	
	public ParserRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//LogicalOrOperator:
	//	'||';
	public ExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaExpressions.getLogicalOrOperatorAccess();
	}
	
	public ParserRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//LogicalNotOperator:
	//	'!';
	public ExpressionsGrammarAccess.LogicalNotOperatorElements getLogicalNotOperatorAccess() {
		return gaExpressions.getLogicalNotOperatorAccess();
	}
	
	public ParserRule getLogicalNotOperatorRule() {
		return getLogicalNotOperatorAccess().getRule();
	}
	
	//BitwiseXOrOperator:
	//	'^';
	public ExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public ParserRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//BitwiseOrOperator:
	//	'|';
	public ExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaExpressions.getBitwiseOrOperatorAccess();
	}
	
	public ParserRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//BitwiseAndOperator:
	//	'&';
	public ExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaExpressions.getBitwiseAndOperatorAccess();
	}
	
	public ParserRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum AssignmentOperator:
	//	assign='=' | multAssign='*=' | divAssign='/=' | modAssign='%=' | addAssign='+=' | subAssign='-=' |
	//	leftShiftAssign='<<=' | rightShiftAssign='>>=' | andAssign='&=' | xorAssign='^=' | orAssign='|=';
	public ExpressionsGrammarAccess.AssignmentOperatorElements getAssignmentOperatorAccess() {
		return gaExpressions.getAssignmentOperatorAccess();
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//enum ShiftOperator:
	//	left='<<' | right='>>';
	public ExpressionsGrammarAccess.ShiftOperatorElements getShiftOperatorAccess() {
		return gaExpressions.getShiftOperatorAccess();
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}
	
	//enum AdditiveOperator:
	//	plus='+' | minus='-';
	public ExpressionsGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaExpressions.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//enum MultiplicativeOperator:
	//	mul='*' | div='/' | mod='%';
	public ExpressionsGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaExpressions.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//enum UnaryOperator:
	//	positive='+' | negative='-' | complement='~';
	public ExpressionsGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaExpressions.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//enum RelationalOperator:
	//	smaller='<' | smallerEqual='<=' | greater='>' | greaterEqual='>=' | equals='==' | notEquals='!=';
	public ExpressionsGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaExpressions.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//terminal BOOL returns ecore::EBoolean:
	//	'true' | 'false' | 'yes' | 'no';
	public TerminalRule getBOOLRule() {
		return gaExpressions.getBOOLRule();
	}
	
	//terminal HEX returns ecore::EInt:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return gaExpressions.getHEXRule();
	}
	
	//terminal BINARY returns ecore::EInt:
	//	'0' ('b' | 'B') ('0' | '1')+;
	public TerminalRule getBINARYRule() {
		return gaExpressions.getBINARYRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	(INT '.' INT) ('e' ('-' | '+') INT)? ('d' | 'D')?;
	public TerminalRule getDOUBLERule() {
		return gaExpressions.getDOUBLERule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	(INT '.' INT) ('e' ('-' | '+') INT)? ('f' | 'F')?;
	public TerminalRule getFLOATRule() {
		return gaExpressions.getFLOATRule();
	}
	
	//QID:
	//	ID ('.' ID)*;
	public ExpressionsGrammarAccess.QIDElements getQIDAccess() {
		return gaExpressions.getQIDAccess();
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.12.0
 */
package com.yakindu.solidity.serializer;

import com.google.inject.Inject;
import com.yakindu.solidity.services.SolidityGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SoliditySyntacticSequencer extends AbstractSyntacticSequencer {

	protected SolidityGrammarAccess grammarAccess;
	protected AbstractElementAlias match_FunctionDefinition___ExternalKeyword_3_0_or_InternalKeyword_3_2_or_PrivateKeyword_3_3_or_PublicKeyword_3_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SolidityGrammarAccess) access;
		match_FunctionDefinition___ExternalKeyword_3_0_or_InternalKeyword_3_2_or_PrivateKeyword_3_3_or_PublicKeyword_3_1__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getFunctionDefinitionAccess().getExternalKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getFunctionDefinitionAccess().getInternalKeyword_3_2()), new TokenAlias(false, false, grammarAccess.getFunctionDefinitionAccess().getPrivateKeyword_3_3()), new TokenAlias(false, false, grammarAccess.getFunctionDefinitionAccess().getPublicKeyword_3_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBitwiseAndOperatorRule())
			return getBitwiseAndOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBitwiseOrOperatorRule())
			return getBitwiseOrOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBitwiseXOrOperatorRule())
			return getBitwiseXOrOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLogicalAndOperatorRule())
			return getLogicalAndOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLogicalNotOperatorRule())
			return getLogicalNotOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLogicalOrOperatorRule())
			return getLogicalOrOperatorToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BitwiseAndOperator:
	 * 	'&';
	 */
	protected String getBitwiseAndOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&";
	}
	
	/**
	 * BitwiseOrOperator:
	 * 	'|';
	 */
	protected String getBitwiseOrOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "|";
	}
	
	/**
	 * BitwiseXOrOperator:
	 * 	'^';
	 */
	protected String getBitwiseXOrOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "^";
	}
	
	/**
	 * LogicalAndOperator:
	 * 	'&&';
	 */
	protected String getLogicalAndOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&&";
	}
	
	/**
	 * LogicalNotOperator:
	 * 	'!';
	 */
	protected String getLogicalNotOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!";
	}
	
	/**
	 * LogicalOrOperator:
	 * 	'||';
	 */
	protected String getLogicalOrOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "||";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_FunctionDefinition___ExternalKeyword_3_0_or_InternalKeyword_3_2_or_PrivateKeyword_3_3_or_PublicKeyword_3_1__a.equals(syntax))
				emit_FunctionDefinition___ExternalKeyword_3_0_or_InternalKeyword_3_2_or_PrivateKeyword_3_3_or_PublicKeyword_3_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('external' | 'public' | 'internal' | 'private')*
	 *
	 * This ambiguous syntax occurs at:
	 *     parameter=ParameterList (ambiguity) ';' (rule end)
	 *     parameter=ParameterList (ambiguity) 'returns' returnParameter=ParameterList
	 *     parameter=ParameterList (ambiguity) block=Block
	 */
	protected void emit_FunctionDefinition___ExternalKeyword_3_0_or_InternalKeyword_3_2_or_PrivateKeyword_3_3_or_PublicKeyword_3_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

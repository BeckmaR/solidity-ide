/**
 * generated by Xtext 2.12.0
 */
package com.yakindu.solidity.solidity.impl;

import com.yakindu.solidity.solidity.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SolidityFactoryImpl extends EFactoryImpl implements SolidityFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SolidityFactory init()
  {
    try
    {
      SolidityFactory theSolidityFactory = (SolidityFactory)EPackage.Registry.INSTANCE.getEFactory(SolidityPackage.eNS_URI);
      if (theSolidityFactory != null)
      {
        return theSolidityFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SolidityFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SolidityFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SolidityPackage.SOLIDITY_MODEL: return createSolidityModel();
      case SolidityPackage.PARAMETER_LIST: return createParameterList();
      case SolidityPackage.BLOCK: return createBlock();
      case SolidityPackage.MODIFIER_INVOCATION_LITERAL: return createModifierInvocationLiteral();
      case SolidityPackage.SOURCE_UNIT: return createSourceUnit();
      case SolidityPackage.PRAGMA_DIRECTIVE: return createPragmaDirective();
      case SolidityPackage.IMPORT_DIRECTIVE: return createImportDirective();
      case SolidityPackage.CONTRACT_DEFINITION: return createContractDefinition();
      case SolidityPackage.VARIABLE_DEFINITION: return createVariableDefinition();
      case SolidityPackage.MODIFIER_DEFINITION: return createModifierDefinition();
      case SolidityPackage.FUNCTION_DEFINITION: return createFunctionDefinition();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SolidityPackage.CONTRACT_TYPE:
        return createContractTypeFromString(eDataType, initialValue);
      case SolidityPackage.VISIBILITY:
        return createVisibilityFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SolidityPackage.CONTRACT_TYPE:
        return convertContractTypeToString(eDataType, instanceValue);
      case SolidityPackage.VISIBILITY:
        return convertVisibilityToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SolidityModel createSolidityModel()
  {
    SolidityModelImpl solidityModel = new SolidityModelImpl();
    return solidityModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModifierInvocationLiteral createModifierInvocationLiteral()
  {
    ModifierInvocationLiteralImpl modifierInvocationLiteral = new ModifierInvocationLiteralImpl();
    return modifierInvocationLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SourceUnit createSourceUnit()
  {
    SourceUnitImpl sourceUnit = new SourceUnitImpl();
    return sourceUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PragmaDirective createPragmaDirective()
  {
    PragmaDirectiveImpl pragmaDirective = new PragmaDirectiveImpl();
    return pragmaDirective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportDirective createImportDirective()
  {
    ImportDirectiveImpl importDirective = new ImportDirectiveImpl();
    return importDirective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContractDefinition createContractDefinition()
  {
    ContractDefinitionImpl contractDefinition = new ContractDefinitionImpl();
    return contractDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDefinition createVariableDefinition()
  {
    VariableDefinitionImpl variableDefinition = new VariableDefinitionImpl();
    return variableDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModifierDefinition createModifierDefinition()
  {
    ModifierDefinitionImpl modifierDefinition = new ModifierDefinitionImpl();
    return modifierDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDefinition createFunctionDefinition()
  {
    FunctionDefinitionImpl functionDefinition = new FunctionDefinitionImpl();
    return functionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContractType createContractTypeFromString(EDataType eDataType, String initialValue)
  {
    ContractType result = ContractType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertContractTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Visibility createVisibilityFromString(EDataType eDataType, String initialValue)
  {
    Visibility result = Visibility.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVisibilityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SolidityPackage getSolidityPackage()
  {
    return (SolidityPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SolidityPackage getPackage()
  {
    return SolidityPackage.eINSTANCE;
  }

} //SolidityFactoryImpl

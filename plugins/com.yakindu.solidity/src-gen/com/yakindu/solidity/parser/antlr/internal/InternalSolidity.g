/*
 * generated by Xtext 2.12.0
 */
grammar InternalSolidity;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.yakindu.solidity.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.yakindu.solidity.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.yakindu.solidity.services.SolidityGrammarAccess;

}

@parser::members {

 	private SolidityGrammarAccess grammarAccess;

    public InternalSolidityParser(TokenStream input, SolidityGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SolidityModel";
   	}

   	@Override
   	protected SolidityGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSolidityModel
entryRuleSolidityModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSolidityModelRule()); }
	iv_ruleSolidityModel=ruleSolidityModel
	{ $current=$iv_ruleSolidityModel.current; }
	EOF;

// Rule SolidityModel
ruleSolidityModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSolidityModelAccess().getSourceunitSourceUnitParserRuleCall_0());
			}
			lv_sourceunit_0_0=ruleSourceUnit
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSolidityModelRule());
				}
				add(
					$current,
					"sourceunit",
					lv_sourceunit_0_0,
					"com.yakindu.solidity.Solidity.SourceUnit");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSourceUnit
entryRuleSourceUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceUnitRule()); }
	iv_ruleSourceUnit=ruleSourceUnit
	{ $current=$iv_ruleSourceUnit.current; }
	EOF;

// Rule SourceUnit
ruleSourceUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSourceUnitAccess().getPragmaDirectiveParserRuleCall_0());
		}
		this_PragmaDirective_0=rulePragmaDirective
		{
			$current = $this_PragmaDirective_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSourceUnitAccess().getImportDirectiveParserRuleCall_1());
		}
		this_ImportDirective_1=ruleImportDirective
		{
			$current = $this_ImportDirective_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSourceUnitAccess().getContractDefinitionParserRuleCall_2());
		}
		this_ContractDefinition_2=ruleContractDefinition
		{
			$current = $this_ContractDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePragmaDirective
entryRulePragmaDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPragmaDirectiveRule()); }
	iv_rulePragmaDirective=rulePragmaDirective
	{ $current=$iv_rulePragmaDirective.current; }
	EOF;

// Rule PragmaDirective
rulePragmaDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pragma'
		{
			newLeafNode(otherlv_0, grammarAccess.getPragmaDirectiveAccess().getPragmaKeyword_0());
		}
		otherlv_1='solidity'
		{
			newLeafNode(otherlv_1, grammarAccess.getPragmaDirectiveAccess().getSolidityKeyword_1());
		}
		(
			(
				lv_id_2_0=RULE_VERSION
				{
					newLeafNode(lv_id_2_0, grammarAccess.getPragmaDirectiveAccess().getIdVERSIONTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPragmaDirectiveRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_2_0,
						"com.yakindu.solidity.Solidity.VERSION");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getPragmaDirectiveAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleImportDirective
entryRuleImportDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportDirectiveRule()); }
	iv_ruleImportDirective=ruleImportDirective
	{ $current=$iv_ruleImportDirective.current; }
	EOF;

// Rule ImportDirective
ruleImportDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportDirectiveAccess().getImportKeyword_0());
		}
		(
			(
				lv_importedNamespace_1_0=RULE_STRING
				{
					newLeafNode(lv_importedNamespace_1_0, grammarAccess.getImportDirectiveAccess().getImportedNamespaceSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportDirectiveRule());
					}
					setWithLastConsumed(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2='as'
			{
				newLeafNode(otherlv_2, grammarAccess.getImportDirectiveAccess().getAsKeyword_2_0());
			}
			(
				(
					lv_alias_3_0=RULE_STRING
					{
						newLeafNode(lv_alias_3_0, grammarAccess.getImportDirectiveAccess().getAliasSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportDirectiveRule());
						}
						setWithLastConsumed(
							$current,
							"alias",
							lv_alias_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getImportDirectiveAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleContractDefinition
entryRuleContractDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractDefinitionRule()); }
	iv_ruleContractDefinition=ruleContractDefinition
	{ $current=$iv_ruleContractDefinition.current; }
	EOF;

// Rule ContractDefinition
ruleContractDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getContractDefinitionAccess().getTypeContractTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleContractType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"com.yakindu.solidity.Solidity.ContractType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContractDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContractDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='is'
			{
				newLeafNode(otherlv_2, grammarAccess.getContractDefinitionAccess().getIsKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractDefinitionAccess().getSuperTypeInheritanceSpecifierParserRuleCall_2_1_0());
					}
					lv_superType_3_0=ruleInheritanceSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractDefinitionRule());
						}
						add(
							$current,
							"superType",
							lv_superType_3_0,
							"com.yakindu.solidity.Solidity.InheritanceSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getContractDefinitionAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getContractDefinitionAccess().getSuperTypeInheritanceSpecifierParserRuleCall_2_2_1_0());
						}
						lv_superType_5_0=ruleInheritanceSpecifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getContractDefinitionRule());
							}
							add(
								$current,
								"superType",
								lv_superType_5_0,
								"com.yakindu.solidity.Solidity.InheritanceSpecifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getContractDefinitionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContractDefinitionAccess().getPartsContractPartParserRuleCall_4_0());
				}
				lv_parts_7_0=ruleContractPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractDefinitionRule());
					}
					add(
						$current,
						"parts",
						lv_parts_7_0,
						"com.yakindu.solidity.Solidity.ContractPart");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getContractDefinitionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleInheritanceSpecifier
entryRuleInheritanceSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInheritanceSpecifierRule()); }
	iv_ruleInheritanceSpecifier=ruleInheritanceSpecifier
	{ $current=$iv_ruleInheritanceSpecifier.current; }
	EOF;

// Rule InheritanceSpecifier
ruleInheritanceSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getInheritanceSpecifierAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getInheritanceSpecifierRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleContractPart
entryRuleContractPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractPartRule()); }
	iv_ruleContractPart=ruleContractPart
	{ $current=$iv_ruleContractPart.current; }
	EOF;

// Rule ContractPart
ruleContractPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getContractPartAccess().getPartsVariableDeclarationParserRuleCall_0_0());
				}
				lv_parts_0_1=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractPartRule());
					}
					add(
						$current,
						"parts",
						lv_parts_0_1,
						"com.yakindu.solidity.Solidity.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getContractPartAccess().getPartsStructDefinitionParserRuleCall_0_1());
				}
				lv_parts_0_2=ruleStructDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractPartRule());
					}
					add(
						$current,
						"parts",
						lv_parts_0_2,
						"com.yakindu.solidity.Solidity.StructDefinition");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getContractPartAccess().getPartsModifierDefinitionParserRuleCall_0_2());
				}
				lv_parts_0_3=ruleModifierDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractPartRule());
					}
					add(
						$current,
						"parts",
						lv_parts_0_3,
						"com.yakindu.solidity.Solidity.ModifierDefinition");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getContractPartAccess().getPartsFunctionDefinitionParserRuleCall_0_3());
				}
				lv_parts_0_4=ruleFunctionDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractPartRule());
					}
					add(
						$current,
						"parts",
						lv_parts_0_4,
						"com.yakindu.solidity.Solidity.FunctionDefinition");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getContractPartAccess().getPartsEventDefinitionParserRuleCall_0_4());
				}
				lv_parts_0_5=ruleEventDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractPartRule());
					}
					add(
						$current,
						"parts",
						lv_parts_0_5,
						"com.yakindu.solidity.Solidity.EventDefinition");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getContractPartAccess().getPartsEnumDefinitionParserRuleCall_0_5());
				}
				lv_parts_0_6=ruleEnumDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractPartRule());
					}
					add(
						$current,
						"parts",
						lv_parts_0_6,
						"com.yakindu.solidity.Solidity.EnumDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeEObjectCrossReference_0_0());
				}
				ruleQID
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVisibilityVisibilityEnumRuleCall_1_0());
				}
				lv_visibility_1_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_1_0,
						"com.yakindu.solidity.Solidity.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getInitialValueExpressionParserRuleCall_3_1_0());
					}
					lv_initialValue_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"initialValue",
							lv_initialValue_4_0,
							"org.yakindu.base.expressions.Expressions.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleStructDefinition
entryRuleStructDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructDefinitionRule()); }
	iv_ruleStructDefinition=ruleStructDefinition
	{ $current=$iv_ruleStructDefinition.current; }
	EOF;

// Rule StructDefinition
ruleStructDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='struct'
		{
			newLeafNode(otherlv_0, grammarAccess.getStructDefinitionAccess().getStructKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStructDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStructDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStructDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStructDefinitionAccess().getDeclarationsVariableDeclarationParserRuleCall_3_0_0());
					}
					lv_declarations_3_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructDefinitionRule());
						}
						add(
							$current,
							"declarations",
							lv_declarations_3_0,
							"com.yakindu.solidity.Solidity.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getStructDefinitionAccess().getSemicolonKeyword_3_1());
			}
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getStructDefinitionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleModifierDefinition
entryRuleModifierDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifierDefinitionRule()); }
	iv_ruleModifierDefinition=ruleModifierDefinition
	{ $current=$iv_ruleModifierDefinition.current; }
	EOF;

// Rule ModifierDefinition
ruleModifierDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='modifier'
		{
			newLeafNode(otherlv_0, grammarAccess.getModifierDefinitionAccess().getModifierKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModifierDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModifierDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModifierDefinitionAccess().getListParameterListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifierDefinitionRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"com.yakindu.solidity.Solidity.ParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModifierDefinitionAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifierDefinitionRule());
					}
					add(
						$current,
						"block",
						lv_block_3_0,
						"com.yakindu.solidity.Solidity.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current; }
	EOF;

// Rule ParameterList
ruleParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterListAccess().getParameterListAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterListAccess().getParameterParameterParserRuleCall_2_0());
				}
				lv_parameter_2_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterListRule());
					}
					add(
						$current,
						"parameter",
						lv_parameter_2_0,
						"com.yakindu.solidity.Solidity.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getParameterListAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParameterParameterParserRuleCall_3_1_0());
					}
					lv_parameter_4_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"parameter",
							lv_parameter_4_0,
							"com.yakindu.solidity.Solidity.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getExpressionExpressionParserRuleCall_2_0_0());
					}
					lv_expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.yakindu.base.expressions.Expressions.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=superLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getModifierInvocationLiteralParserRuleCall_1());
		}
		this_ModifierInvocationLiteral_1=ruleModifierInvocationLiteral
		{
			$current = $this_ModifierInvocationLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModifierInvocationLiteral
entryRuleModifierInvocationLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifierInvocationLiteralRule()); }
	iv_ruleModifierInvocationLiteral=ruleModifierInvocationLiteral
	{ $current=$iv_ruleModifierInvocationLiteral.current; }
	EOF;

// Rule ModifierInvocationLiteral
ruleModifierInvocationLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModifierInvocationLiteralAccess().getModifierInvocationLiteralAction_0(),
					$current);
			}
		)
		otherlv_1='_;'
		{
			newLeafNode(otherlv_1, grammarAccess.getModifierInvocationLiteralAccess().get_Keyword_1());
		}
	)
;

// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	iv_ruleFunctionDefinition=ruleFunctionDefinition
	{ $current=$iv_ruleFunctionDefinition.current; }
	EOF;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDefinitionAccess().getFunctionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getParameterParameterListParserRuleCall_2_0());
				}
				lv_parameter_2_0=ruleParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					set(
						$current,
						"parameter",
						lv_parameter_2_0,
						"com.yakindu.solidity.Solidity.ParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='external'
			{
				newLeafNode(otherlv_3, grammarAccess.getFunctionDefinitionAccess().getExternalKeyword_3_0());
			}
			    |
			otherlv_4='public'
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionDefinitionAccess().getPublicKeyword_3_1());
			}
			    |
			otherlv_5='internal'
			{
				newLeafNode(otherlv_5, grammarAccess.getFunctionDefinitionAccess().getInternalKeyword_3_2());
			}
			    |
			otherlv_6='private'
			{
				newLeafNode(otherlv_6, grammarAccess.getFunctionDefinitionAccess().getPrivateKeyword_3_3());
			}
		)*
		(
			otherlv_7='returns'
			{
				newLeafNode(otherlv_7, grammarAccess.getFunctionDefinitionAccess().getReturnsKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getReturnParameterParameterListParserRuleCall_4_1_0());
					}
					lv_returnParameter_8_0=ruleParameterList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						set(
							$current,
							"returnParameter",
							lv_returnParameter_8_0,
							"com.yakindu.solidity.Solidity.ParameterList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_5_0());
			}
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBlockBlockParserRuleCall_5_1_0());
					}
					lv_block_10_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						set(
							$current,
							"block",
							lv_block_10_0,
							"com.yakindu.solidity.Solidity.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_varArgs_1_0='...'
				{
					newLeafNode(lv_varArgs_1_0, grammarAccess.getParameterAccess().getVarArgsFullStopFullStopFullStopKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed($current, "varArgs", true, "...");
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeSpecifierTypeSpecifierParserRuleCall_3_0());
				}
				lv_typeSpecifier_3_0=ruleTypeSpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"typeSpecifier",
						lv_typeSpecifier_3_0,
						"org.yakindu.base.expressions.Expressions.TypeSpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEventDefinition
entryRuleEventDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventDefinitionRule()); }
	iv_ruleEventDefinition=ruleEventDefinition
	{ $current=$iv_ruleEventDefinition.current; }
	EOF;

// Rule EventDefinition
ruleEventDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='event'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventDefinitionAccess().getEventKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleEnumDefinition
entryRuleEnumDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumDefinitionRule()); }
	iv_ruleEnumDefinition=ruleEnumDefinition
	{ $current=$iv_ruleEnumDefinition.current; }
	EOF;

// Rule EnumDefinition
ruleEnumDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumDefinitionAccess().getEnumKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEnumDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_STRING
				{
					newLeafNode(lv_value_3_0, grammarAccess.getEnumDefinitionAccess().getValueSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumDefinitionRule());
					}
					addWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getEnumDefinitionAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_value_5_0=RULE_STRING
					{
						newLeafNode(lv_value_5_0, grammarAccess.getEnumDefinitionAccess().getValueSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumDefinitionRule());
						}
						addWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getEnumDefinitionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall());
	}
	this_AssignmentExpression_0=ruleAssignmentExpression
	{
		$current = $this_AssignmentExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	iv_ruleAssignmentExpression=ruleAssignmentExpression
	{ $current=$iv_ruleAssignmentExpression.current; }
	EOF;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_0());
		}
		this_ConditionalExpression_0=ruleConditionalExpression
		{
			$current = $this_ConditionalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionVarRefAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAssignmentOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.yakindu.base.expressions.Expressions.AssignmentOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getExpressionConditionalExpressionParserRuleCall_1_2_0());
					}
					lv_expression_3_0=ruleConditionalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.yakindu.base.expressions.Expressions.ConditionalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	iv_ruleConditionalExpression=ruleConditionalExpression
	{ $current=$iv_ruleConditionalExpression.current; }
	EOF;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0());
		}
		this_LogicalOrExpression_0=ruleLogicalOrExpression
		{
			$current = $this_LogicalOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConditionalExpressionAccess().getConditionalExpressionConditionAction_1_0(),
						$current);
				}
			)
			otherlv_2='?'
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueCaseLogicalOrExpressionParserRuleCall_1_2_0());
					}
					lv_trueCase_3_0=ruleLogicalOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
						}
						set(
							$current,
							"trueCase",
							lv_trueCase_3_0,
							"org.yakindu.base.expressions.Expressions.LogicalOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseCaseLogicalOrExpressionParserRuleCall_1_4_0());
					}
					lv_falseCase_5_0=ruleLogicalOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
						}
						set(
							$current,
							"falseCase",
							lv_falseCase_5_0,
							"org.yakindu.base.expressions.Expressions.LogicalOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	iv_ruleLogicalOrExpression=ruleLogicalOrExpression
	{ $current=$iv_ruleLogicalOrExpression.current; }
	EOF;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0());
		}
		this_LogicalAndExpression_0=ruleLogicalAndExpression
		{
			$current = $this_LogicalAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrOperatorParserRuleCall_1_1());
			}
			ruleLogicalOrOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0());
					}
					lv_rightOperand_3_0=ruleLogicalAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
						}
						set(
							$current,
							"rightOperand",
							lv_rightOperand_3_0,
							"org.yakindu.base.expressions.Expressions.LogicalAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	iv_ruleLogicalAndExpression=ruleLogicalAndExpression
	{ $current=$iv_ruleLogicalAndExpression.current; }
	EOF;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0());
		}
		this_LogicalNotExpression_0=ruleLogicalNotExpression
		{
			$current = $this_LogicalNotExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndOperatorParserRuleCall_1_1());
			}
			ruleLogicalAndOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0());
					}
					lv_rightOperand_3_0=ruleLogicalNotExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
						}
						set(
							$current,
							"rightOperand",
							lv_rightOperand_3_0,
							"org.yakindu.base.expressions.Expressions.LogicalNotExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalNotExpressionRule()); }
	iv_ruleLogicalNotExpression=ruleLogicalNotExpression
	{ $current=$iv_ruleLogicalNotExpression.current; }
	EOF;

// Rule LogicalNotExpression
ruleLogicalNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getBitwiseXorExpressionParserRuleCall_0());
		}
		this_BitwiseXorExpression_0=ruleBitwiseXorExpression
		{
			$current = $this_BitwiseXorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotOperatorParserRuleCall_1_1());
			}
			ruleLogicalNotOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getOperandBitwiseXorExpressionParserRuleCall_1_2_0());
					}
					lv_operand_3_0=ruleBitwiseXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalNotExpressionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_3_0,
							"org.yakindu.base.expressions.Expressions.BitwiseXorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBitwiseXorExpression
entryRuleBitwiseXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseXorExpressionRule()); }
	iv_ruleBitwiseXorExpression=ruleBitwiseXorExpression
	{ $current=$iv_ruleBitwiseXorExpression.current; }
	EOF;

// Rule BitwiseXorExpression
ruleBitwiseXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseOrExpressionParserRuleCall_0());
		}
		this_BitwiseOrExpression_0=ruleBitwiseOrExpression
		{
			$current = $this_BitwiseOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseXorExpressionAccess().getBitwiseXorExpressionLeftOperandAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseXOrOperatorParserRuleCall_1_1());
			}
			ruleBitwiseXOrOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getRightOperandBitwiseOrExpressionParserRuleCall_1_2_0());
					}
					lv_rightOperand_3_0=ruleBitwiseOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseXorExpressionRule());
						}
						set(
							$current,
							"rightOperand",
							lv_rightOperand_3_0,
							"org.yakindu.base.expressions.Expressions.BitwiseOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseOrExpressionRule()); }
	iv_ruleBitwiseOrExpression=ruleBitwiseOrExpression
	{ $current=$iv_ruleBitwiseOrExpression.current; }
	EOF;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseAndExpressionParserRuleCall_0());
		}
		this_BitwiseAndExpression_0=ruleBitwiseAndExpression
		{
			$current = $this_BitwiseAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseOrExpressionAccess().getBitwiseOrExpressionLeftOperandAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseOrOperatorParserRuleCall_1_1());
			}
			ruleBitwiseOrOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getRightOperandBitwiseAndExpressionParserRuleCall_1_2_0());
					}
					lv_rightOperand_3_0=ruleBitwiseAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
						}
						set(
							$current,
							"rightOperand",
							lv_rightOperand_3_0,
							"org.yakindu.base.expressions.Expressions.BitwiseAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseAndExpressionRule()); }
	iv_ruleBitwiseAndExpression=ruleBitwiseAndExpression
	{ $current=$iv_ruleBitwiseAndExpression.current; }
	EOF;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getLogicalRelationExpressionParserRuleCall_0());
		}
		this_LogicalRelationExpression_0=ruleLogicalRelationExpression
		{
			$current = $this_LogicalRelationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseAndExpressionAccess().getBitwiseAndExpressionLeftOperandAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getBitwiseAndOperatorParserRuleCall_1_1());
			}
			ruleBitwiseAndOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getRightOperandLogicalRelationExpressionParserRuleCall_1_2_0());
					}
					lv_rightOperand_3_0=ruleLogicalRelationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
						}
						set(
							$current,
							"rightOperand",
							lv_rightOperand_3_0,
							"org.yakindu.base.expressions.Expressions.LogicalRelationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalRelationExpression
entryRuleLogicalRelationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalRelationExpressionRule()); }
	iv_ruleLogicalRelationExpression=ruleLogicalRelationExpression
	{ $current=$iv_ruleLogicalRelationExpression.current; }
	EOF;

// Rule LogicalRelationExpression
ruleLogicalRelationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getShiftExpressionParserRuleCall_0());
		}
		this_ShiftExpression_0=ruleShiftExpression
		{
			$current = $this_ShiftExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleRelationalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalRelationExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.yakindu.base.expressions.Expressions.RelationalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandShiftExpressionParserRuleCall_1_2_0());
					}
					lv_rightOperand_3_0=ruleShiftExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalRelationExpressionRule());
						}
						set(
							$current,
							"rightOperand",
							lv_rightOperand_3_0,
							"org.yakindu.base.expressions.Expressions.ShiftExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	iv_ruleShiftExpression=ruleShiftExpression
	{ $current=$iv_ruleShiftExpression.current; }
	EOF;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShiftExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0());
		}
		this_NumericalAddSubtractExpression_0=ruleNumericalAddSubtractExpression
		{
			$current = $this_NumericalAddSubtractExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleShiftOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.yakindu.base.expressions.Expressions.ShiftOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0());
					}
					lv_rightOperand_3_0=ruleNumericalAddSubtractExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
						}
						set(
							$current,
							"rightOperand",
							lv_rightOperand_3_0,
							"org.yakindu.base.expressions.Expressions.NumericalAddSubtractExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNumericalAddSubtractExpression
entryRuleNumericalAddSubtractExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionRule()); }
	iv_ruleNumericalAddSubtractExpression=ruleNumericalAddSubtractExpression
	{ $current=$iv_ruleNumericalAddSubtractExpression.current; }
	EOF;

// Rule NumericalAddSubtractExpression
ruleNumericalAddSubtractExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0());
		}
		this_NumericalMultiplyDivideExpression_0=ruleNumericalMultiplyDivideExpression
		{
			$current = $this_NumericalMultiplyDivideExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
				)
				(
					(
						ruleAdditiveOperator
					)
				)
				(
					(
						ruleNumericalMultiplyDivideExpression
					)
				)
			)
			)=>
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_1_0());
						}
						lv_operator_2_0=ruleAdditiveOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNumericalAddSubtractExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"org.yakindu.base.expressions.Expressions.AdditiveOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_0_2_0());
						}
						lv_rightOperand_3_0=ruleNumericalMultiplyDivideExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNumericalAddSubtractExpressionRule());
							}
							set(
								$current,
								"rightOperand",
								lv_rightOperand_3_0,
								"org.yakindu.base.expressions.Expressions.NumericalMultiplyDivideExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleNumericalMultiplyDivideExpression
entryRuleNumericalMultiplyDivideExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionRule()); }
	iv_ruleNumericalMultiplyDivideExpression=ruleNumericalMultiplyDivideExpression
	{ $current=$iv_ruleNumericalMultiplyDivideExpression.current; }
	EOF;

// Rule NumericalMultiplyDivideExpression
ruleNumericalMultiplyDivideExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0());
		}
		this_NumericalUnaryExpression_0=ruleNumericalUnaryExpression
		{
			$current = $this_NumericalUnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
				)
				(
					(
						ruleMultiplicativeOperator
					)
				)
				(
					(
						ruleNumericalUnaryExpression
					)
				)
			)
			)=>
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_0_1_0());
						}
						lv_operator_2_0=ruleMultiplicativeOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNumericalMultiplyDivideExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"org.yakindu.base.expressions.Expressions.MultiplicativeOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_0_2_0());
						}
						lv_rightOperand_3_0=ruleNumericalUnaryExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNumericalMultiplyDivideExpressionRule());
							}
							set(
								$current,
								"rightOperand",
								lv_rightOperand_3_0,
								"org.yakindu.base.expressions.Expressions.NumericalUnaryExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleNumericalUnaryExpression
entryRuleNumericalUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericalUnaryExpressionRule()); }
	iv_ruleNumericalUnaryExpression=ruleNumericalUnaryExpression
	{ $current=$iv_ruleNumericalUnaryExpression.current; }
	EOF;

// Rule NumericalUnaryExpression
ruleNumericalUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getTypeCastExpressionParserRuleCall_0());
		}
		this_TypeCastExpression_0=ruleTypeCastExpression
		{
			$current = $this_TypeCastExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleUnaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericalUnaryExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.yakindu.base.expressions.Expressions.UnaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getOperandTypeCastExpressionParserRuleCall_1_2_0());
					}
					lv_operand_3_0=ruleTypeCastExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericalUnaryExpressionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_3_0,
							"org.yakindu.base.expressions.Expressions.TypeCastExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTypeCastExpression
entryRuleTypeCastExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeCastExpressionRule()); }
	iv_ruleTypeCastExpression=ruleTypeCastExpression
	{ $current=$iv_ruleTypeCastExpression.current; }
	EOF;

// Rule TypeCastExpression
ruleTypeCastExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeCastExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getTypeCastExpressionAccess().getTypeCastExpressionOperandAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='as'
				{
					newLeafNode(otherlv_2, grammarAccess.getTypeCastExpressionAccess().getAsKeyword_1_0_1());
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeCastExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getTypeCastExpressionAccess().getTypeTypeCrossReference_1_1_0());
					}
					ruleQID
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0());
		}
		this_PrimitiveValueExpression_0=rulePrimitiveValueExpression
		{
			$current = $this_PrimitiveValueExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1());
		}
		this_FeatureCall_1=ruleFeatureCall
		{
			$current = $this_FeatureCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_2());
		}
		this_ParenthesizedExpression_2=ruleParenthesizedExpression
		{
			$current = $this_ParenthesizedExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimitiveValueExpression
entryRulePrimitiveValueExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveValueExpressionRule()); }
	iv_rulePrimitiveValueExpression=rulePrimitiveValueExpression
	{ $current=$iv_rulePrimitiveValueExpression.current; }
	EOF;

// Rule PrimitiveValueExpression
rulePrimitiveValueExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0());
				}
				lv_value_1_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveValueExpressionRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"com.yakindu.solidity.Solidity.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureCallRule()); }
	iv_ruleFeatureCall=ruleFeatureCall
	{ $current=$iv_ruleFeatureCall.current; }
	EOF;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureCallAccess().getElementReferenceExpressionParserRuleCall_0());
		}
		this_ElementReferenceExpression_0=ruleElementReferenceExpression
		{
			$current = $this_ElementReferenceExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFeatureCallAccess().getFeatureCallOwnerAction_1_0(),
						$current);
				}
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getFeatureCallAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFeatureCallRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getFeatureCallAccess().getFeatureEObjectCrossReference_1_2_0());
					}
				)
			)
			(
				(
					(
						((
							'('
						)
						)=>
						(
							lv_operationCall_4_0='('
							{
								newLeafNode(lv_operationCall_4_0, grammarAccess.getFeatureCallAccess().getOperationCallLeftParenthesisKeyword_1_3_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getFeatureCallRule());
								}
								setWithLastConsumed($current, "operationCall", true, "(");
							}
						)
					)
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getFeatureCallAccess().getArgumentsArgumentParserRuleCall_1_3_0_1_0_0());
								}
								lv_arguments_5_0=ruleArgument
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
									}
									add(
										$current,
										"arguments",
										lv_arguments_5_0,
										"org.yakindu.base.expressions.Expressions.Argument");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_6=','
							{
								newLeafNode(otherlv_6, grammarAccess.getFeatureCallAccess().getCommaKeyword_1_3_0_1_1_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getFeatureCallAccess().getArgumentsArgumentParserRuleCall_1_3_0_1_1_1_0());
									}
									lv_arguments_7_0=ruleArgument
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
										}
										add(
											$current,
											"arguments",
											lv_arguments_7_0,
											"org.yakindu.base.expressions.Expressions.Argument");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)*
					)?
					otherlv_8=')'
					{
						newLeafNode(otherlv_8, grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_1_3_0_2());
					}
				)
				    |
				(
					(
						((
							(
								(
									'['
								)
							)
							(
								(
									ruleExpression
								)
							)
							']'
						)
						)=>
						(
							(
								(
									lv_arrayAccess_9_0='['
									{
										newLeafNode(lv_arrayAccess_9_0, grammarAccess.getFeatureCallAccess().getArrayAccessLeftSquareBracketKeyword_1_3_1_0_0_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getFeatureCallRule());
										}
										setWithLastConsumed($current, "arrayAccess", true, "[");
									}
								)
							)
							(
								(
									{
										newCompositeNode(grammarAccess.getFeatureCallAccess().getArraySelectorExpressionParserRuleCall_1_3_1_0_0_1_0());
									}
									lv_arraySelector_10_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
										}
										add(
											$current,
											"arraySelector",
											lv_arraySelector_10_0,
											"org.yakindu.base.expressions.Expressions.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_11=']'
							{
								newLeafNode(otherlv_11, grammarAccess.getFeatureCallAccess().getRightSquareBracketKeyword_1_3_1_0_0_2());
							}
						)
					)
					(
						((
							'['
							(
								(
									ruleExpression
								)
							)
							']'
						)
						)=>
						(
							otherlv_12='['
							{
								newLeafNode(otherlv_12, grammarAccess.getFeatureCallAccess().getLeftSquareBracketKeyword_1_3_1_1_0_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getFeatureCallAccess().getArraySelectorExpressionParserRuleCall_1_3_1_1_0_1_0());
									}
									lv_arraySelector_13_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
										}
										add(
											$current,
											"arraySelector",
											lv_arraySelector_13_0,
											"org.yakindu.base.expressions.Expressions.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_14=']'
							{
								newLeafNode(otherlv_14, grammarAccess.getFeatureCallAccess().getRightSquareBracketKeyword_1_3_1_1_0_2());
							}
						)
					)*
				)
			)?
		)*
	)
;

// Entry rule entryRuleElementReferenceExpression
entryRuleElementReferenceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementReferenceExpressionRule()); }
	iv_ruleElementReferenceExpression=ruleElementReferenceExpression
	{ $current=$iv_ruleElementReferenceExpression.current; }
	EOF;

// Rule ElementReferenceExpression
ruleElementReferenceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElementReferenceExpressionAccess().getElementReferenceExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementReferenceExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getElementReferenceExpressionAccess().getReferenceEObjectCrossReference_1_0());
				}
			)
		)
		(
			(
				(
					((
						'('
					)
					)=>
					(
						lv_operationCall_2_0='('
						{
							newLeafNode(lv_operationCall_2_0, grammarAccess.getElementReferenceExpressionAccess().getOperationCallLeftParenthesisKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getElementReferenceExpressionRule());
							}
							setWithLastConsumed($current, "operationCall", true, "(");
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getElementReferenceExpressionAccess().getArgumentsArgumentParserRuleCall_2_0_1_0_0());
							}
							lv_arguments_3_0=ruleArgument
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getElementReferenceExpressionRule());
								}
								add(
									$current,
									"arguments",
									lv_arguments_3_0,
									"org.yakindu.base.expressions.Expressions.Argument");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=','
						{
							newLeafNode(otherlv_4, grammarAccess.getElementReferenceExpressionAccess().getCommaKeyword_2_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getElementReferenceExpressionAccess().getArgumentsArgumentParserRuleCall_2_0_1_1_1_0());
								}
								lv_arguments_5_0=ruleArgument
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getElementReferenceExpressionRule());
									}
									add(
										$current,
										"arguments",
										lv_arguments_5_0,
										"org.yakindu.base.expressions.Expressions.Argument");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_6=')'
				{
					newLeafNode(otherlv_6, grammarAccess.getElementReferenceExpressionAccess().getRightParenthesisKeyword_2_0_2());
				}
			)
			    |
			(
				(
					((
						(
							(
								'['
							)
						)
						(
							(
								ruleExpression
							)
						)
						']'
					)
					)=>
					(
						(
							(
								lv_arrayAccess_7_0='['
								{
									newLeafNode(lv_arrayAccess_7_0, grammarAccess.getElementReferenceExpressionAccess().getArrayAccessLeftSquareBracketKeyword_2_1_0_0_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getElementReferenceExpressionRule());
									}
									setWithLastConsumed($current, "arrayAccess", true, "[");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorExpressionParserRuleCall_2_1_0_0_1_0());
								}
								lv_arraySelector_8_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getElementReferenceExpressionRule());
									}
									add(
										$current,
										"arraySelector",
										lv_arraySelector_8_0,
										"org.yakindu.base.expressions.Expressions.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						otherlv_9=']'
						{
							newLeafNode(otherlv_9, grammarAccess.getElementReferenceExpressionAccess().getRightSquareBracketKeyword_2_1_0_0_2());
						}
					)
				)
				(
					((
						'['
						(
							(
								ruleExpression
							)
						)
						']'
					)
					)=>
					(
						otherlv_10='['
						{
							newLeafNode(otherlv_10, grammarAccess.getElementReferenceExpressionAccess().getLeftSquareBracketKeyword_2_1_1_0_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getElementReferenceExpressionAccess().getArraySelectorExpressionParserRuleCall_2_1_1_0_1_0());
								}
								lv_arraySelector_11_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getElementReferenceExpressionRule());
									}
									add(
										$current,
										"arraySelector",
										lv_arraySelector_11_0,
										"org.yakindu.base.expressions.Expressions.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						otherlv_12=']'
						{
							newLeafNode(otherlv_12, grammarAccess.getElementReferenceExpressionAccess().getRightSquareBracketKeyword_2_1_1_0_2());
						}
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArgumentRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getArgumentAccess().getParameterParameterCrossReference_0_0_0());
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getArgumentAccess().getEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentAccess().getValueConditionalExpressionParserRuleCall_1_0());
				}
				lv_value_2_0=ruleConditionalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.yakindu.base.expressions.Expressions.ConditionalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	iv_ruleParenthesizedExpression=ruleParenthesizedExpression
	{ $current=$iv_ruleParenthesizedExpression.current; }
	EOF;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParenthesizedExpressionAccess().getParenthesizedExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.yakindu.base.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSpecifierRule()); }
	iv_ruleTypeSpecifier=ruleTypeSpecifier
	{ $current=$iv_ruleTypeSpecifier.current; }
	EOF;

// Rule TypeSpecifier
ruleTypeSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeSpecifierRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTypeSpecifierAccess().getTypeTypeCrossReference_0_0());
				}
				ruleQID
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='<'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeSpecifierAccess().getLessThanSignKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsTypeSpecifierParserRuleCall_1_1_0_0());
						}
						lv_typeArguments_2_0=ruleTypeSpecifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeSpecifierRule());
							}
							add(
								$current,
								"typeArguments",
								lv_typeArguments_2_0,
								"org.yakindu.base.expressions.Expressions.TypeSpecifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getTypeSpecifierAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTypeSpecifierAccess().getTypeArgumentsTypeSpecifierParserRuleCall_1_1_1_1_0());
							}
							lv_typeArguments_4_0=ruleTypeSpecifier
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTypeSpecifierRule());
								}
								add(
									$current,
									"typeArguments",
									lv_typeArguments_4_0,
									"org.yakindu.base.expressions.Expressions.TypeSpecifier");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_5='>'
				{
					newLeafNode(otherlv_5, grammarAccess.getTypeSpecifierAccess().getGreaterThanSignKeyword_1_1_2());
				}
			)
		)?
	)
;

// Entry rule entrySuperLiteral
entrySuperLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionsLiteralRule()); }
	iv_superLiteral=superLiteral
	{ $current=$iv_superLiteral.current; }
	EOF;

// Rule Literal
superLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionsLiteralAccess().getBoolLiteralParserRuleCall_0());
		}
		this_BoolLiteral_0=ruleBoolLiteral
		{
			$current = $this_BoolLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionsLiteralAccess().getIntLiteralParserRuleCall_1());
		}
		this_IntLiteral_1=ruleIntLiteral
		{
			$current = $this_IntLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionsLiteralAccess().getHexLiteralParserRuleCall_2());
		}
		this_HexLiteral_2=ruleHexLiteral
		{
			$current = $this_HexLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionsLiteralAccess().getBinaryLiteralParserRuleCall_3());
		}
		this_BinaryLiteral_3=ruleBinaryLiteral
		{
			$current = $this_BinaryLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionsLiteralAccess().getDoubleLiteralParserRuleCall_4());
		}
		this_DoubleLiteral_4=ruleDoubleLiteral
		{
			$current = $this_DoubleLiteral_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionsLiteralAccess().getFloatLiteralParserRuleCall_5());
		}
		this_FloatLiteral_5=ruleFloatLiteral
		{
			$current = $this_FloatLiteral_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionsLiteralAccess().getStringLiteralParserRuleCall_6());
		}
		this_StringLiteral_6=ruleStringLiteral
		{
			$current = $this_StringLiteral_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionsLiteralAccess().getNullLiteralParserRuleCall_7());
		}
		this_NullLiteral_7=ruleNullLiteral
		{
			$current = $this_NullLiteral_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); }
	iv_ruleBoolLiteral=ruleBoolLiteral
	{ $current=$iv_ruleBoolLiteral.current; }
	EOF;

// Rule BoolLiteral
ruleBoolLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolLiteralAccess().getBoolLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_BOOL
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBoolLiteralAccess().getValueBOOLTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.yakindu.base.expressions.Expressions.BOOL");
				}
			)
		)
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntLiteralAccess().getIntLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoubleLiteralRule()); }
	iv_ruleDoubleLiteral=ruleDoubleLiteral
	{ $current=$iv_ruleDoubleLiteral.current; }
	EOF;

// Rule DoubleLiteral
ruleDoubleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDoubleLiteralAccess().getDoubleLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_DOUBLE
				{
					newLeafNode(lv_value_1_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDoubleLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.yakindu.base.expressions.Expressions.DOUBLE");
				}
			)
		)
	)
;

// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	iv_ruleFloatLiteral=ruleFloatLiteral
	{ $current=$iv_ruleFloatLiteral.current; }
	EOF;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_FLOAT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFloatLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.yakindu.base.expressions.Expressions.FLOAT");
				}
			)
		)
	)
;

// Entry rule entryRuleHexLiteral
entryRuleHexLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHexLiteralRule()); }
	iv_ruleHexLiteral=ruleHexLiteral
	{ $current=$iv_ruleHexLiteral.current; }
	EOF;

// Rule HexLiteral
ruleHexLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHexLiteralAccess().getHexLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_HEX
				{
					newLeafNode(lv_value_1_0, grammarAccess.getHexLiteralAccess().getValueHEXTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHexLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.yakindu.base.expressions.Expressions.HEX");
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryLiteral
entryRuleBinaryLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryLiteralRule()); }
	iv_ruleBinaryLiteral=ruleBinaryLiteral
	{ $current=$iv_ruleBinaryLiteral.current; }
	EOF;

// Rule BinaryLiteral
ruleBinaryLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBinaryLiteralAccess().getBinaryLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_BINARY
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBinaryLiteralAccess().getValueBINARYTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinaryLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.yakindu.base.expressions.Expressions.BINARY");
				}
			)
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	iv_ruleNullLiteral=ruleNullLiteral
	{ $current=$iv_ruleNullLiteral.current; }
	EOF;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
					$current);
			}
		)
		otherlv_1='null'
		{
			newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
		}
	)
;

// Entry rule entryRuleLogicalAndOperator
entryRuleLogicalAndOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndOperatorRule()); }
	iv_ruleLogicalAndOperator=ruleLogicalAndOperator
	{ $current=$iv_ruleLogicalAndOperator.current.getText(); }
	EOF;

// Rule LogicalAndOperator
ruleLogicalAndOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='&&'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLogicalAndOperatorAccess().getAmpersandAmpersandKeyword());
	}
;

// Entry rule entryRuleLogicalOrOperator
entryRuleLogicalOrOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOrOperatorRule()); }
	iv_ruleLogicalOrOperator=ruleLogicalOrOperator
	{ $current=$iv_ruleLogicalOrOperator.current.getText(); }
	EOF;

// Rule LogicalOrOperator
ruleLogicalOrOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='||'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLogicalOrOperatorAccess().getVerticalLineVerticalLineKeyword());
	}
;

// Entry rule entryRuleLogicalNotOperator
entryRuleLogicalNotOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicalNotOperatorRule()); }
	iv_ruleLogicalNotOperator=ruleLogicalNotOperator
	{ $current=$iv_ruleLogicalNotOperator.current.getText(); }
	EOF;

// Rule LogicalNotOperator
ruleLogicalNotOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='!'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLogicalNotOperatorAccess().getExclamationMarkKeyword());
	}
;

// Entry rule entryRuleBitwiseXOrOperator
entryRuleBitwiseXOrOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseXOrOperatorRule()); }
	iv_ruleBitwiseXOrOperator=ruleBitwiseXOrOperator
	{ $current=$iv_ruleBitwiseXOrOperator.current.getText(); }
	EOF;

// Rule BitwiseXOrOperator
ruleBitwiseXOrOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='^'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBitwiseXOrOperatorAccess().getCircumflexAccentKeyword());
	}
;

// Entry rule entryRuleBitwiseOrOperator
entryRuleBitwiseOrOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseOrOperatorRule()); }
	iv_ruleBitwiseOrOperator=ruleBitwiseOrOperator
	{ $current=$iv_ruleBitwiseOrOperator.current.getText(); }
	EOF;

// Rule BitwiseOrOperator
ruleBitwiseOrOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='|'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBitwiseOrOperatorAccess().getVerticalLineKeyword());
	}
;

// Entry rule entryRuleBitwiseAndOperator
entryRuleBitwiseAndOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseAndOperatorRule()); }
	iv_ruleBitwiseAndOperator=ruleBitwiseAndOperator
	{ $current=$iv_ruleBitwiseAndOperator.current.getText(); }
	EOF;

// Rule BitwiseAndOperator
ruleBitwiseAndOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='&'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBitwiseAndOperatorAccess().getAmpersandKeyword());
	}
;

// Entry rule entryRuleQID
entryRuleQID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQIDRule()); }
	iv_ruleQID=ruleQID
	{ $current=$iv_ruleQID.current.getText(); }
	EOF;

// Rule QID
ruleQID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQIDAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQIDAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Rule ContractType
ruleContractType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='contract'
			{
				$current = grammarAccess.getContractTypeAccess().getCONTRACTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getContractTypeAccess().getCONTRACTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='library'
			{
				$current = grammarAccess.getContractTypeAccess().getLIBRARYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getContractTypeAccess().getLIBRARYEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='interface'
			{
				$current = grammarAccess.getContractTypeAccess().getINTERFACEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getContractTypeAccess().getINTERFACEEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Visibility
ruleVisibility returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='public'
			{
				$current = grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='internal'
			{
				$current = grammarAccess.getVisibilityAccess().getINTERNALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVisibilityAccess().getINTERNALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='private'
			{
				$current = grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='constant'
			{
				$current = grammarAccess.getVisibilityAccess().getCONSTANTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getVisibilityAccess().getCONSTANTEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='*='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='/='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='%='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='+='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='-='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='<<='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='>>='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='&='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='^='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='|='
			{
				$current = grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10());
			}
		)
	)
;

// Rule ShiftOperator
ruleShiftOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<<'
			{
				$current = grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>>'
			{
				$current = grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='%'
			{
				$current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='~'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>'
			{
				$current = grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='=='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='!='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_VERSION : '^' RULE_INT . RULE_INT . RULE_INT;

RULE_BOOL : ('true'|'false'|'yes'|'no');

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_BINARY : '0' ('b'|'B') ('0'|'1')+;

RULE_DOUBLE : RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)? ('d'|'D')?;

RULE_FLOAT : RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)? ('f'|'F')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
